
Chapter() "Predicates";

ChapterIntro("
A predicate is a function that returns a boolean value, i.e. " :
HtmlTerm("True") : " or " : HtmlTerm("False") : ". Predicates are
often used in patterns, For instance, a rule that only holds for a
positive integer would use a pattern like " :
HtmlTerm("n_IsPositiveInteger") : ".");



CmdDescription(Lt(), "Test whether lhs is smaller than rhs");
StandardLib();

Topical() "Calling Sequence";
Text() "e1 ":Lt():" e2 (prec. 9)";

Topical() "Parameters";
Text() "e1, e2 - expressions to be compared";

Topical() "Description";
Text() "
The two expression are evaluated. If both results are numeric, they
are compared. If the first expression is smaller than the second one,
the result is " : HtmlTerm("True") : " and it is " : HtmlTerm("False")
: " otherwise. If either of the expression is not numeric, after
evaluation, the expression is returned with evaluated arguments.
<p> </p>
The word \"numeric\" in the previous paragraph has the following
meaning. An expression is numeric if it is either a number (i.e. " :
HtmlTerm("IsNumber") : " returns " : HtmlTerm("True") : "), or the
quotient of two numbers, or an infinity (i.e. " : HtmlTerm("IsInfinity")
: " returns " : HtmlTerm("True") : ")."; 

Topical() "Examples";
Text() HtmlCommand("
In> 2 < 5;
Out> True;
In> Cos(1) < 5;
Out> Cos(1)<5;
In> N(Cos(1)) < 5;
Out> True");

Topical() "See Also";
SeeAlso({"IsNumber", "IsInfinity", "N"});



CmdDescription(Gt(), "Test whether lhs is larger than rhs");
StandardLib();

Topical() "Calling Sequence";
Text() "e1 ":Gt():" e2 (prec. 9)";

Topical() "Parameters";
Text() "e1, e2 - expressions to be compared";

Topical() "Description";
Text() "
The two expression are evaluated. If both results are numeric, they
are compared. If the first expression is larger than the second one,
the result is " : HtmlTerm("True") : " and it is " : HtmlTerm("False")
: " otherwise. If either of the expression is not numeric, after
evaluation, the expression is returned with evaluated arguments.
<p> </p>
The word \"numeric\" in the previous paragraph has the following
meaning. An expression is numeric if it is either a number (i.e. " :
HtmlTerm("IsNumber") : " returns " : HtmlTerm("True") : "), or the
quotient of two numbers, or an infinity (i.e. " : HtmlTerm("IsInfinity")
: " returns " : HtmlTerm("True") : ")."; 

Topical() "Examples";
Text() HtmlCommand("
In> 2 > 5;
Out> False;
In> Cos(1) > 5;
Out> Cos(1)>5;
In> N(Cos(1)) > 5;
Out> False");

Topical() "See Also";
SeeAlso({"IsNumber", "IsInfinity", "N"});



CmdDescription(Lt():"=", "Test whether lhs is smaller or equal rhs");
StandardLib();

Topical() "Calling Sequence";
Text() "e1 ":Lt():"= e2 (prec. 9)";

Topical() "Parameters";
Text() "e1, e2 - expressions to be compared";

Topical() "Description";
Text() "
The two expression are evaluated. If both results are numeric, they
are compared. If the first expression is smaller than or equals the
second one, the result is " : HtmlTerm("True") : " and it is " :
HtmlTerm("False") : " otherwise. If either of the expression is not
numeric, after evaluation, the expression is returned with evaluated
arguments. 
<p> </p>
The word \"numeric\" in the previous paragraph has the following
meaning. An expression is numeric if it is either a number (i.e. " :
HtmlTerm("IsNumber") : " returns " : HtmlTerm("True") : "), or the
quotient of two numbers, or an infinity (i.e. " : HtmlTerm("IsInfinity")
: " returns " : HtmlTerm("True") : ")."; 

Topical() "Examples";
Text() HtmlCommand("
In> 2 <= 5;
Out> True;
In> Cos(1) <= 5;
Out> Cos(1)<=5;
In> N(Cos(1)) <= 5;
Out> True");

Topical() "See Also";
SeeAlso({"IsNumber", "IsInfinity", "N"});



CmdDescription(Gt():"=", "Test whether lhs is larger or equal rhs");
StandardLib();

Topical() "Calling Sequence";
Text() "e1 ":Gt():"= e2 (prec. 9)";

Topical() "Parameters";
Text() "e1, e2 - expressions to be compared";

Topical() "Description";
Text() "
The two expression are evaluated. If both results are numeric, they
are compared. If the first expression is larger than or equals the
second one, the result is " : HtmlTerm("True") : " and it is " :
HtmlTerm("False") : " otherwise. If either of the expression is not
numeric, after evaluation, the expression is returned with evaluated
arguments. 
<p> </p>
The word \"numeric\" in the previous paragraph has the following
meaning. An expression is numeric if it is either a number (i.e. " :
HtmlTerm("IsNumber") : " returns " : HtmlTerm("True") : "), or the
quotient of two numbers, or an infinity (i.e. " : HtmlTerm("IsInfinity")
: " returns " : HtmlTerm("True") : ")."; 

Topical() "Examples";
Text() HtmlCommand("
In> 2 >= 5;
Out> False;
In> Cos(1) >= 5;
Out> Cos(1)>=5;
In> N(Cos(1)) >= 5;
Out> False");

Topical() "See Also";
SeeAlso({"IsNumber", "IsInfinity", "N"});



CmdDescription("!=", "Test whether two expressions are not equal");
StandardLib();

Topical() "Calling Sequence";
Text() "e1 != e2 (prec. 9)";

Topical() "Parameters";
Text() "e1, e2 - expressions to be compared";

Topical() "Description";
Text() "
Both expression are evaluated and compared. If they turn out to be
equal, the result is " : HtmlTerm("False") : ". Otherwise, the result
is " : HtmlTerm("True") : ".
<p> </p>
The expression " : HtmlTerm("e1 != e2") : " is equivalent to " :
HtmlTerm("Not(e1 = e2)") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> 1 != 2;
Out> True;
In> 1 != 1;
Out> False;");

Topical() "See Also";
SeeAlso({"="});



CmdDescription("=", "Test whether two expressoins are equal");
StandardLib();

Topical() "Calling Sequence";
Text() "e1 = e2 (prec. 9)";

Topical() "Parameters";
Text() "e1, e2 - expressions to be compared";

Topical() "Description";
Text() "
Both expression are evaluated and compared. If they turn out to be
equal, the result is " : HtmlTerm("True") : ". Otherwise, the result is "
: HtmlTerm("False") : ". The function " : HtmlTerm("Equals") : " does
the same.
<p> </p>
Note that the test is on syntactic equality, not mathematical
equality. Hence even if the result is " : HtmlTerm("False") : ", the
expressions can still be (mathematically) equal; see the examples
underneath. Put otherwise, this function tests whether the two
expressions would be displayed in the same way if they were printed.";

Topical() "Examples";
Text() HtmlCommand("
In> e1 := (x+1) * (x-1);
Out> (x+1)*(x-1);
In> e2 := x^2 - 1;
Out> x^2-1;

In> e1 = e2;
Out> False;
In> Expand(e1) = e2;
Out> True;");

SeeAlso({"!=", "Equals"});



CmdDescription("Not", "Logical negation");
BuiltIn();
Topical()"Calling Sequence";
Text()"Not bool";

Topical()"Parameters";
Text()"bool - a boolean expression";

Topical()"Description";
Text()"Not returns the logical negation of the argument bool. If bool is
False it returns True, and if the argument is True Not returns False.
If the argument is neither True nor False it returns the entire
expression with evaluated arguments.";

Topical()"Examples";
Text()
HtmlCommand(
"In> Not True
Out> False;
In> Not False
Out> True;
In> Not(a)
Out> Not a;
");

Topical()"See Also"; 
SeeAlso({"And","Or"});



CmdDescription("And", "Logical conjunction");
BuiltIn();
Topical()"Calling Sequence";
Text()
"a1 And a2  (prec. 100) <br>
And(a1,a2,a3,...,an)";

Topical()"Parameters";
Text()"a1 .. an - boolean values (True or False)";

Topical()"Description";
Text()"This function returns True if all arguments are true. The
And operation is lazy, it returns False as soon as a False argument
is found (from left to right). If an argument other than True or
False is encountered a new And expression is returned with all
arguments that didn't evaluate to True or False yet.";

Topical()"Examples";
Text()
HtmlCommand(
"In> True And False
Out> False;
In> And(True,True)
Out> True;
In> False And a
Out> False;
In> True And a
Out> And(a);
In> And(True,a,True,b)
Out> b And a;
");

Topical()"See Also"; 
SeeAlso({"Or","Not"});



CmdDescription("Or", "Logical disjunction");
BuiltIn();
Topical()"Calling Sequence";
Text()"a1 Or a2  (prec. 101) <br>
Or(a1,a2,a3,...,an)";

Topical()"Parameters";
Text()"a1 .. an - boolean values (True or False)";

Topical()"Description";
Text()"This function returns True if an argument is encountered
that is true (scanning from left to right). The
Or operation is lazy, it returns True as soon as a True argument
is found (from left to right). If an argument other than True or
False is encountered a new Or expression is returned with all
arguments that didn't evaluate to True or False yet.";

Topical()"Examples";
Text()
HtmlCommand(
"In> True Or False
Out> True;
In> False Or a
Out> Or(a);
In> Or(False,a,b,True)
Out> True;
");

Topical()"See Also"; 
SeeAlso({"And","Not"});



CmdDescription("IsFreeOf", "Test whether expression depends on variable");
StandardLib();

Topical() "Calling Sequence";
Text() "
IsFreeOf(expr, var) <br>
IsFreeOf(expr, {var, ...})";

Topical() "Parameters";
Text() "
expr - expression to test <br>
var - variable to look for in \"expr\"";

Topical() "Description";
Text() "
This function checks whether the expression \"expr\" (after being
evaluated) depends on the variable \"var\". It returns " :
HtmlTerm("False") : " if this is the case and " : HtmlTerm("True") : "
otherwise. 
<p> </p>
The second form test whether the expression depends on <em>any</em> of
the variables named in the list. The result is " : HtmlTerm("True") :
" if none of the variables appear in the expression and " :
HtmlTerm("False") : " otherwise.";

Topical() "Examples";
Text() HtmlCommand("
In> IsFreeOf(Sin(x), x);
Out> False;
In> IsFreeOf(Sin(x), y);
Out> True;
In> IsFreeOf(D(x) a*x+b, x);
Out> True;
In> IsFreeOf(Sin(x), {x,y});
Out> False;") : "
The third command returns " : HtmlTerm("True") : " because the
expression " : HtmlTerm("D(x) a*x+b") : " evaluates to " :
HtmlTerm("a") : ", which does not depend on " : HtmlTerm("x") : ".";

Topical() "See Also";
SeeAlso({"Contains"});



CmdDescription("IsZeroVector", "Test whether list contains only zeroes");
StandardLib();

Topical() "Calling Sequence";
Text() "IsZeroVector(list)";

Topical() "Parameters";
Text() "list - list to compare against the zero vector";

Topical() "Description";
Text() "
The only argument given to " : HtmlTerm("IsZeroVector") : " should be
a list. The result is " : HtmlTerm("True") : " if the list contains
only zeroes and " : HtmlTerm("False") : " otherwise.";

Topical() "Examples";
Text() HtmlCommand("
In> IsZeroVector({0, x, 0});
Out> False;
In> IsZeroVector({x-x, 1 - D(x) x});
Out> True;");

Topical() "See Also";
SeeAlso({"IsList", "ZeroVector"});



CmdDescription("IsNonObject", "Test whether argument is not an Object()");
StandardLib();

Topical() "Calling Sequence";
Text() "IsNonObject(expr)";

Topical() "Parameters";
Text() "expr - the expression to examine";

Topical() "Description";
Text() "
This function returns " : HtmlTerm("True") : " if \"expr\" is not of
the form " : HtmlTerm("Object(...)") : " and " : HtmlTerm("False") : "
otherwise."; 

Topical() "Bugs";
Text() "In fact, the result is always " : HtmlTerm("True") : ".";

Topical() "See Also";
SeeAlso({"Object"}):



CmdDescription("IsEven", "Test whether integer is even");
StandardLib();

Topical() "Calling Sequence";
Text() "IsEven(n)";

Topical() "Parameters";
Text() "n - integer to test";

Topical() "Description";
Text() "
This function tests whether the integer \"n\" is even. An integer is
even if it is divisible by two. Hence the even numbers are 0, 2, 4, 6,
8, 10, etcetera, and -2, -4, -6, -8, -10, etcetera.";

Topical() "Examples";
Text() HtmlCommand("
In> IsEven(4);
Out> True;
In> IsEven(-1);
Out> False;");

Topical() "See Also";
SeeAlso({"IsOdd", "IsInteger"});



CmdDescription("IsOdd", "Test whether integer is odd");
StandardLib();

Topical() "Calling Sequence";
Text() "IsOdd(n)";

Topical() "Parameters";
Text() "n - integer to test";

Topical() "Description";
Text() "
This function tests whether the integer \"n\" is odd. An integer is
odd if it is not divisible by two. Hence the odd numbers are 1, 3, 5,
7, 9, etcetera, and -1, -3, -5, -7, -9, etcetera."; 

Topical() "Examples";
Text() HtmlCommand("
In> IsOdd(4);
Out> False;
In> IsOdd(-1);
Out> True;");

Topical() "See Also";
SeeAlso({"IsEven", "IsInteger"});



CmdDescription("IsFunction", "Test whether argument is a composite object");
BuiltIn();

Topical() "Calling Sequence";
Text() "IsFunction(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tests whether \"expr\" is a composite object, ie. not an
atom. This includes not only obvious functions like " : HtmlTerm("f(x)")
: ", but also expressions like " : HtmlTerm("x+5") : " and lists.";

Topical() "Examples";
Text() HtmlCommand("
In> IsFunction(x+5);
Out> True;
In> IsFunction(x);
Out> False;");

Topical() "See Also";
SeeAlso({"IsAtom", "IsList", "Type"});



CmdDescription("IsAtom", "Test whether argument is an atom");
BuiltIn();

Topical() "Calling Sequence";
Text() "IsAtom(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tests whether \"expr\" is an atom. Numbers, strings, and
variables are all atoms.";

Topical() "Examples";
Text() HtmlCommand("
In> IsAtom(x+5);
Out> Falso;
In> IsAtom(5);
Out> True;");

Topical() "See Also";
SeeAlso({"IsFunction", "IsNumber", "IsString"});



CmdDescription("IsString", "Test whether argument is an string");
BuiltIn();

Topical() "Calling Sequence";
Text() "IsString(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tests whether \"expr\" is a string. A string is a text
within quotes, eg. " : HtmlTerm("\"duh\"") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsString(\"duh\");
Out> True;
In> IsString(duh);
Out> False;");

Topical() "See Also";
SeeAlso({"IsAtom", "IsNumber"});



CmdDescription("IsNumber", "Test whether argument is a number");
BuiltIn();

Topical() "Calling Sequence";
Text() "IsNumber(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tests whether \"expr\" is a number. There are two kinds
of numbers, integers (like 6) and reals (like -2.75 or 6.0). Note that a
complex number is represented by the " : HtmlTerm("Complex") : "
function, so " : HtmlTerm("IsNumber") : " will return " :
HtmlTerm("False") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsNumber(6);
Out> True;
In> IsNumber(3.25);
Out> True;
In> IsNumber(I);
Out> False;
In> IsNumber(\"duh\");
Out> False;");

Topical() "See Also";
SeeAlso({"IsAtom", "IsString", "IsInteger", "IsPositiveNumber",
"IsNegativeNumber", "Complex"});



CmdDescription("IsList", "Test whether argument is a list");
BuiltIn();

Topical() "Calling Sequence";
Text() "IsList(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tests whether \"expr\" is a list. A list is a sequence
between curly braces, like " : HtmlTerm("{2, 3, 5}") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsList({2,3,5});
Out> True;
In> IsList(2+3+5);
Out> False;");

Topical() "See Also";
SeeAlso({"IsFunction"});



CmdDescription("IsBound", "Test whether a variable is bound to a value");
BuiltIn();

Topical() "Calling Sequence";
Text() "IsBound(var)";

Topical() "Parameters";
Text() "var - variable to test";

Topical() "Description";
Text() "
This function tests whether the variable \"var\" is bound, ie. whether
it has a value. The argument \"var\" is not evaluated.";

Topical() "Examples";
Text() HtmlCommand("
In> IsBound(x);
Out> False;
In> x := 5;
Out> 5;
In> IsBound(x);
Out> True;");

Topical() "See Also";
SeeAlso({"IsAtom"});



CmdDescription("IsBoolean", "Test whether argument is a Boolean");
StandardLib();

Topical()"Calling Sequence";
Text()"IsBoolean(expression)";

Topical()"Parameters";
Text()"expression - an expression";

Topical()"Description";
Text()"IsBoolean returns True if the argument is of a boolean type.
This means it has to be either True, False, or an expression involving
functions that return a boolean result, like
=, &gt, &lt, &gt=, &lt=, !=, And, Not, Or.
";

Topical()"Examples";
Text()
HtmlCommand(
"In> IsBoolean(a)
Out> False;
In> IsBoolean(True)
Out> True;
In> IsBoolean(a And b)
Out> True;");

Topical()"See Also"; 
SeeAlso({"True","False"});



CmdDescription("IsNegativeNumber", 
               "Test whether argument is a negative number");
StandardLib();

Topical() "Calling Sequence";
Text() "IsNegativeNumber(n)";

Topical() "Parameters";
Text() "n - number to test";

Topical() "Description";
Text() 
HtmlTerm("IsNegativeNumber(n)") : " evaluates to " : HtmlTerm("True")
: " if \"n\" is (strictly) negative, ie. if n<0. If \"n\" is not a
number, the function returns " : HtmlTerm("False") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsNegativeNumber(6);
Out> False;
In> IsNegativeNumber(-2.5);
Out> True;");

Topical() "See Also";
SeeAlso({"IsNumber", "IsPositiveNumber", "IsNotZero",
"IsNegativeInteger", "IsNegativeReal"});



CmdDescription("IsNegativeInteger", 
               "Test whether argument is a negative integer");
StandardLib();

Topical() "Calling Sequence";
Text() "IsNegativeInteger(n)";

Topical() "Parameters";
Text() "n - integer to test";

Topical() "Description";
Text() "
This function tests whether the integer \"n\" is (strictly)
negative. The negative integers are -1, -2, -3, -4, -5, etcetera. If
\"n\" is not a integer, the function returns " : HtmlTerm("False") : "."; 

Topical() "Examples";
Text() HtmlCommand("
In> IsNegativeInteger(31);
Out> False;
In> IsNegativeInteger(-2);
Out> True;");

Topical() "See Also";
SeeAlso({"IsPositiveInteger", "IsNonZeroInteger", "IsNegativeNumber"});



CmdDescription("IsPositiveNumber", 
               "Test whether argument is a positive number");
StandardLib();

Topical() "Calling Sequence";
Text() "IsPositiveNumber(n)";

Topical() "Parameters";
Text() "n - number to test";

Topical() "Description";
Text() 
HtmlTerm("IsPositiveNumber(n)") : " evaluates to " : HtmlTerm("True")
: " if \"n\" is (strictly) positive, ie. if n>0. If \"n\" is not a
number the function returns " : HtmlTerm("False") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsPositiveNumber(6);
Out> True;
In> IsPositiveNumber(-2.5);
Out> False;");

Topical() "See Also";
SeeAlso({"IsNumber", "IsNegativeNumber", "IsNotZero",
"IsPositiveInteger", "IsPositiveReal"});



CmdDescription("IsPositiveInteger", 
               "Test whether argument is a positive integer");
StandardLib();

Topical() "Calling Sequence";
Text() "IsPositiveInteger(n)";

Topical() "Parameters";
Text() "n - integer to test";

Topical() "Description";
Text() "
This function tests whether the integer \"n\" is (strictly) positive. The
positive integers are 1, 2, 3, 4, 5, etcetera. If \"n\" is not a
integer the function returns " : HtmlTerm("False") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsPositiveInteger(31);
Out> True;
In> IsPositiveInteger(-2);
Out> False;");

Topical() "See Also";
SeeAlso({"IsNegativeInteger", "IsNonZeroInteger", "IsPositiveNumber"});



CmdDescription("IsNotZero", "Test whether argument is a nonzero number");
StandardLib();

Topical() "Calling Sequence";
Text() "IsNotZero(n)";

Topical() "Parameters";
Text() "n - number to test";

Topical() "Description";
Text() 
HtmlTerm("IsNotZero(n)") : " evaluates to " : HtmlTerm("True") : " if
\"n\" is not zero. In case \"n\" is not a number, the function returns
" : HtmlTerm("False") : "."; 

Topical() "Examples";
Text() HtmlCommand("
In> IsNotZero(3.25);
Out> True;
In> IsNotZero(0);
Out> False;");

Topical() "See Also";
SeeAlso({"IsNumber", "IsPositiveNumber", "IsNegativeNumber",
"IsNonZeroInteger"}); 



CmdDescription("IsNonZeroInteger", 
               "Test whether argument is a nonzero integer");
StandardLib();

Topical() "Calling Sequence";
Text() "IsNonZeroInteger(n)";

Topical() "Parameters";
Text() "n - integer to test";

Topical() "Description";
Text() "
This function tests whether the integer \"n\" is not zero. If \"n\" is
not an integer, the result is " : HtmlTerm("False") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsNonZeroInteger(0)
Out> False;
In> IsNonZeroInteger(-2)
Out> True;");

Topical() "See Also";
SeeAlso({"IsPositiveInteger", "IsNegativeInteger", "IsNotZero"});



CmdDescription("IsInfinity", "Test whether argument is an infinity");
StandardLib();

Topical() "Calling Sequence";
Text() "IsInfinity(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tests whether \"expr\" is an infinity. This is only the
case if \"expr\" is either " : HtmlTerm("Infinity") : " or " :
HtmlTerm("-Infinity") : ".";

Topical() "Examples";
Text() HtmlCommand("
In> IsInfinity(10^1000);
Out> False;
In> IsInfinity(-Infinity);
Out> True;");

Topical() "See Also";
SeeAlso({"Integer"});



CmdDescription("IsPositiveReal", 
               "Test whether argument is numerically positive");
StandardLib();

Topical() "Calling Sequence";
Text() "IsPositiveReal(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tries to approximate \"expr\" numerically. It returns "
: HtmlTerm("True") : " if this approximation is positive. In case no
approximation can be found, the function returns " :
HtmlTerm("False") : ". Note that round-off errors may cause incorrect
results."; 

Topical() "Examples";
Text() HtmlCommand("
In> IsPositiveReal(Sin(1)-3/4);
Out> True;
In> IsPositiveReal(Sin(1)-6/7);
Out> False;
In> IsPositiveReal(Exp(x));
Out> False;") : 
"The last result is because " : HtmlTerm("Exp(x)") : " cannot be
numerically approximated if " : HtmlTerm("x") : " is not known. Hence
Yacas can not determine the sign of this expression.";

Topical() "See Also";
SeeAlso({"IsNegativeReal", "IsPositiveNumber", "N"});



CmdDescription("IsNegativeReal", 
               "Test whether argument is numerically negative");
StandardLib();

Topical() "Calling Sequence";
Text() "IsNegativeReal(expr)";

Topical() "Parameters";
Text() "expr - expression to test";

Topical() "Description";
Text() "
This function tries to approximate \"expr\" numerically. It returns "
: HtmlTerm("True") : " if this approximation is negative. In case no
approximation can be found, the function returns " :
HtmlTerm("False") : ". Note that round-off errors may cause incorrect
results."; 

Topical() "Examples";
Text() HtmlCommand("
In> IsNegativeReal(Sin(1)-3/4);
Out> False;
In> IsNegativeReal(Sin(1)-6/7);
Out> True;
In> IsNegativeReal(Exp(x));
Out> False;") : 
"The last result is because " : HtmlTerm("Exp(x)") : " cannot be
numerically approximated if " : HtmlTerm("x") : " is not known. Hence
Yacas can not determine the sign of this expression.";

Topical() "See Also";
SeeAlso({"IsPositiveReal", "IsNegativeNumber", "N"});



CmdDescription("IsConstant", "Test whether argument is constant");
StandardLib();

Topical()"Calling Sequence";
Text()"IsConstant(expr)";

Topical()"Parameters";
Text()"expr - some expression";

Topical()"Description";
Text() 
HtmlTerm("IsConstant") : " returns " : HtmlTerm("True") : " if the
expression is some constant or a function with constant arguments. It
does this by checking that no variables are referenced in the
expression."; 

Topical()"Examples";
Text()
HtmlCommand(
"In> IsConstant(Cos(x))
Out> False;
In> IsConstant(Cos(2))
Out> True;
In> IsConstant(Cos(2+x))
Out> False;
");

Topical()"See Also"; 
SeeAlso({"IsNumber","IsInteger","VarList"});















