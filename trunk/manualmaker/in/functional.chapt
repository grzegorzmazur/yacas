
Chapter()"Functional operators";

ChapterIntro("
These operators can help the user to program in the style of
functional programming languages like Miranda and Haskell.");



CmdDescription(":", "Prepend item to list, or concatenate strings");
StandardLib();

Topical()"Calling Sequence";
Text()
"item : list (prec. 7) <br>
string1 : string2 (prec. 7)";

Topical()"Parameters";
Text()
"item - an item to be prepended to a list <br>
list - a list <br>
string1 - a string <br>
string2 - a string 
";

Topical()"Description";
Text()
"The first form prepends \"item\" as the first entry to the list
\"list\". The second form concatenates the strings \"string1\" and
\"string2\"."; 

Topical()"Examples";
Text()
HtmlCommand(
"In> a:b:c:{}
Out> {a,b,c};
In> \"This\":\"Is\":\"A\":\"String\"
Out> \"ThisIsAString\";
");

Topical()"See Also"; 
SeeAlso({"Concat","ConcatStrings"});



CmdDescription("@", "Apply a function");
StandardLib();

Topical()"Calling Sequence";
Text()"fn @ arglist (prec. 60)";

Topical()"Parameters";
Text()
"fn - function to apply <br>
arglist - single argument, or a list of arguments";

Topical()"Description";
Text() "
This function is a shorthand for ":HtmlTerm("Apply"):". It applies the
function \"fn\" to the argument(s) in \"arglist\" and returns the
result. The first parameter \"fn\" can either be a string containing
the name of a function or a pure function.";

Topical()"Examples";
Text()
HtmlCommand(
"
In> \"Sin\" @ a
Out> Sin(a);
In> {{a},Sin(a)} @ a
Out> Sin(a);
In> \"f\" @ {a,b}
Out> f(a,b);
");

Topical()"See Also"; 
SeeAlso({"Apply"});



CmdDescription("/@", "Apply a function to all entries in a list");
StandardLib();

Topical()"Calling Sequence";
Text()"fn /@ list (prec. 60)";

Topical()"Parameters";
Text()
"fn - function to apply <br>
list - list of arguments";

Topical()"Description";
Text() "
This function is a shorthand for ":HtmlTerm("MapSingle"):". It
successively applies the function \"fn\" to all the entries in
\"list\" and returns a list contains the results. The parameter \"fn\"
can either be a string containing the name of a function or a pure
function."; 

Topical()"Examples";
Text()
HtmlCommand(
"In> \"Sin\" /@ {a,b}
Out> {Sin(a),Sin(b)};
In> {{a},Sin(a)*a} /@ {a,b}
Out> {Sin(a)*a,Sin(b)*b};
");

Topical()"See Also"; 
SeeAlso({"MapSingle", "Map", "MapArgs"});



CmdDescription("..", "Construct a list of consecutive integers");
StandardLib();
Topical()"Calling Sequence";
Text()"n .. m (prec. 60)";

Topical()"Parameters";
Text()
"n - integer. the first entry in the list <br>
m - integer, the last entry in the list 
";

Topical()"Description";
Text()
"This command returns the list \"{n, n+1, n+2, ..., m}\". If \"m\" is
smaller than \"n\", the empty list is returned. Note that the
":HtmlTerm(".."):" operator should be surrounded by spaces to keep the
parser happy, if \"n\" is a number. So one should write ":HtmlTerm("1
.. 4"):" instead of ":HtmlTerm("1..4"):".";

Topical()"Examples";
Text()
HtmlCommand(
"In> 1 .. 4
Out> {1,2,3,4};
");

Topical() "See Also";
SeeAlso({"Table"});

