
Chapter()"String manipulation";

CmdDescription("SetStringMid", "Change a substring");
BuiltIn();
Topical()"Calling Sequence";
Text()"SetStringMid(index,substring,string)";

Topical()"Parameters";
Text()
"index - index of substring to get <br>
substring - substring to store <br>
string - string to store substring in.
";

Topical()"Description";
Text()
"Set (change) a part of a string. It leaves the original alone, returning
a new changed copy.";

Topical()"Examples";
Text()
HtmlCommand(
"In> SetStringMid(3,\"XY\",\"abcdef\")
Out> \"abXYef\";
");

Topical()"See Also"; 
SeeAlso({"StringMid","Length"});



CmdDescription("StringMid", "Retrieve a substring");
BuiltIn();
Topical()"Calling Sequence";
Text()"StringMid(index,length,string)";

Topical()"Parameters";
Text()
"index - index of substring to get <br>
length - length of substring to get <br>
string - string to get substring from
";

Topical()"Description";
Text()
"StringMid returns a part of a string. Substrings can also be
accessed using the [] operator.";

Topical()"Examples";
Text()
HtmlCommand(
"In> StringMid(3,2,\"abcdef\")
Out> \"cd\";
In> \"abcdefg\"[2 .. 4]
Out> \"bcd\";
");

Topical()"See Also"; 
SeeAlso({"SetStringMid","Length"});



AddBody(HtmlAnchor() "String");
AddBody(HtmlAnchor() "Atom");
CmdDescription("String, Atom", "Convert atom to string and vice versa");
BuiltIn();
Topical()"Calling Sequence";
Text()
"Atom(string) <br>
String(atom)
";

Topical()"Parameters";
Text()
"atom - an atom <br>
string - a string
";

Topical()"Description";
Text()
"
Atom(string) : 
Returns an atom with the string representation given
as the evaluated argument. Example: \"Atom(\"foo\");\" returns
foo.
":
HtmlNewParagraph():
"
String is the inverse of Atom: turns atom into \"atom\".
";

Topical()"Examples";
Text()
HtmlCommand(
"In> String(a)
Out> \"a\";
In> Atom(\"a\")
Out> a;
");



CmdDescription("ConcatStrings", "Concatenate strings");
BuiltIn();
Topical()"Calling Sequence";
Text()"ConcatStrings(strings)";

Topical()"Parameters";
Text()"strings - one or more strings";

Topical()"Description";
Text()
"
ConcatStrings concatenates strings. Example:
\"ConcatStrings(\"a\",\"b\",\"c\");\" will return \"abc\".
";

Topical()"Examples";
Text()
HtmlCommand(
"In> ConcatStrings(\"a\",\"b\",\"c\")
Out> \"abc\";
");

Topical()"See Also"; 
SeeAlso({":"});



CmdDescription("LocalSymbols", 
               "Create unique local symbols with given prefix");
StandardLib();
Topical()"Calling Sequence";
Text()"LocalSymbols(...)body";

Topical()"Parameters";
Text()
"... - list of symbols <br>
body - expression to execute
";

Topical()"Description";
Text()
"Given the symbols passed as the first arguments to LocalSymbols
a set of local symbols will be created, and creates unique ones
for them, typically of the form $<symbol><number>, where
symbol was the symbol entered by the user, and number is a unique
number. This scheme was used
to such a generated symbol can not accientally be entered by a user.
":
HtmlNewParagraph():
"
This is useful in cases where a guaranteed free variable is needed,
like in the macro-like functions (For, While, etc.).
";

Topical()"Examples";
Text()
HtmlCommand(
"In> LocalSymbols(a,b)a+b
Out> $a6+ $b6;
");

Topical()"See Also"; 
SeeAlso({"UniqueConstant"});



CmdDescription("PatchString", 
               "Execute commands between &lt? and ?&gt in string");
BuiltIn();
Topical()"Calling Sequence";
Text()"PatchString(string)";

Topical()"Parameters";
Text()"string - a string to patch";

Topical()"Description";
Text()
"This function does the same as PatchLoad, but it works on a string
in stead of on the contents of a text file. See PatchLoad for more
details.
";

Topical()"Examples";
Text()
HtmlCommand(
"In> PatchString(\"Two plus three is &lt? Write(2+3); ?&gt \");
Out> \"Two plus three is 5 \";
");

Topical()"See Also"; 
SeeAlso({"PatchLoad"});


