/* book2ys - extract Yacas code from Yacas docs (by Serge Winitzki)
	version 0.2
	0.1 Extract all tab-indented lines (HtmlCommand), except for the ones that start with In> or Out> -- those are omitted
	0.2 The variable StripComments controls whether any comments are printed.
	The function ysFileName specifies an alternative output file name for code extraction.
*/

curFileName := "-";	// default file name
outputSoFar := "";	// accumulated output in case we aren't printing to the default file 

// function to change the current output file name
ysFileName(newFileName) :=
If(
	newFileName != curFileName,
	[
		// the file has changed, let's write out the old one
		If(
			curFileName != "-",	// otherwise it has already been written out
			ToFile(curFileName)WriteString(outputSoFar)
		);
		outputSoFar := "";
		curFileName := newFileName;
	]
);

/// Write either to default output or to an alternative file
10 # WriteOut("") <-- True;
20 # WriteOut(x_IsString)_(curFileName = "-") <-- WriteString(x);
30 # WriteOut(x_IsString) <-- 
[	// accumulate output here, since we can't append to files
	outputSoFar := ConcatStrings(outputSoFar, x);
];


Chapter(x) := WriteOut(
"// \\chapter{" : x : "}
");
Section(x) := WriteOut(
"// \\section{" : x : "}
");
SubSection(x) := WriteOut(
"// \\subsection*{" : x : "}
");

Enumerate(x) := x;
Itemize(x) := x;

HtmlNewParagraph() := "

";

// check whether the code sample starts with strings "In" or "Out", possibly after some newlines
is'code'sample(x) :=
[
	Local(i);
	For(i:=1, i<=Length(x)-4 And StringMid(i, 1, x) = Nl(), i++) [];
	StringMid(i, 3, x) = "In>" Or StringMid(i, 4, x) = "Out>";
];

10 # make'comments(_x)_StripComments <-- "";
20 # make'comments(_x) <--
[
	Local(i);
	For(i:=1, i<=Length(x), i++)
		If(
			StringMid(i, 1, x) = Nl(),
			x:= ConcatStrings(StringMid(1, i, x), "//", StringMid(i+1,Length(x)-i-1, x))
		);
	x;
];

HtmlCommand(x) :=
	WriteOut(
		If(
			Not is'code'sample(x), 
			x,
			make'comments(x)
		)
	);

HtmlEmphasis(x) := x;

/* decide whether to use "verb" or "texttt" based on whether the string contains any of the special characters #, _, \, &, {, }, ~ */

HtmlTerm(x) := x;

HtmlTermHeading(x) := x;

HtmlBreak() := "
";

Bodied("Item",2);	/* competes with prec. 7 of ":" */
Bodied("Book",60000);
Bodied("Title",60000);
Bodied("Author",60000);
Bodied("Chapter",60000);
Bodied("Section",60000);
Bodied("SubSection",60000);
Bodied("Text",60000);
Bodied("Blurb",60000);
Bodied("DocumentationComment",60000);
Bodied("Itemize",2);
Bodied("Enumerate",2);

IncludeFile(x) := Load(x);

HtmlLink(text, url, param1, param2) := "";

Text() text := True;

RuleBase("TeXMath", {x});
RuleBase("TeXMathD", {x});
RuleBase("TeXMathD", {x,y});
HoldArg("TeXMath", x);
HoldArg("TeXMathD", x);
/* use <-- since := would redefine everything */
TeXMath(_x) <-- x;
TeXMathD(_x) <-- x;
// special form: punctuation at the end of a displayed equation
TeXMathD(_x, _string) <-- x;

/* stuff for refman */

Bodied("ChapterIntro", 60000);

AddBody(string) := WriteOut(string);

// make SeeAlso print "See also" and do not do the Topical thing

AddAnchor(string) := "";
HtmlAnchor(string) := "";

Bodied("HtmlAnchor", 60000);
Bodied("Topical",60000);
Blurb(string) := [ True ];	// Blurb() does nothing in TeX mode
Bodied("Blurb",60000);
// special escapes
Gt() := ">";
Lt() := "<";
