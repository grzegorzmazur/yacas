/* book2TeX - convert Yacas docs back to TeX format (Serge Winitzki)
	version 0.2 */

/* If one of these occurs inside an HtmlTerm block, it must be made \\verb| | or escaped with a backslash */
TexCharsToEscape := { "{", "}", "#", "_", "&", "\\", "^", "%", "$", "~"};

Book(x) := [	/* this is the first declaration in a file */
	WriteString("
\\documentclass[twocolumn,10pt]{report}

\\setlength{\\topmargin}{-1.2in}
\\setlength{\\oddsidemargin}{-0.5in}
\\setlength{\\evensidemargin}{-0.5in}
\\setlength{\\textwidth}{7.2in}
\\setlength{\\textheight}{10.0in}

\\begin{document}
\\title{" : x : "}
\\author{by the \\textsc{Yacas} team
\\thanks{
This text is part of the \\textsc{Yacas} software package and may be freely
distributed under the terms of the GNU General Public License (GPL) for
documentation, version 2 or later.
Principal documentation authors:
Ayal Zwi Pinkus, Serge Winitzki, Jitse Niesen.
}}
\\date{\\textsc{Yacas} version: " : Version() : "
\\\\
generated on \\today}
\\maketitle
\\tableofcontents
");
];

Text(x) := WriteString(x);
Chapter(x) := WriteString(
"\\chapter{" : x : "}
");
Section(x) := WriteString(
"\\section{" : x : "}
");
SubSection(x) := WriteString(
"\\subsection*{" : x : "}
");

Itemize(body) :=
"\\begin{itemize}
" : body : "
\\end{itemize}";

Enumerate(body) :=
"\\begin{enumerate}
" : body : "
\\end{enumerate}";


Item(body) := "\\item{" : body : "}";

HtmlNewParagraph() := "

";

HtmlCommand(x) := "\\begin{quote}\\small\\begin{verbatim}" : x : "\\end{verbatim}\\end{quote}
"; /* use "quote" and not "quotation" */

HtmlEmphasis(x) := "\\emph{" : x : "}";

/* decide whether to use "verb" or "texttt" based on whether the string contains any of the special characters #, _, \, &, {, }, ~ */

HasTexChars(x) := [
	Local(i);
	For (i:=1, i<=Length(x) And Not Contains(TexCharsToEscape, x[i]), i:=i+1) [];
	i<=Length(x);
];

HtmlTerm(x) :=
If(x = "Yacas",
	"\\textsc{Yacas}",
	If (
		HasTexChars(x),
		"\\verb|" : x : "|",
		"\\texttt{" : x : "}"
	)
);

TexEscapeTT(x) := [
	Local(i, result);
	For ([i:=1; result:="";], i<=Length(x), i:=i+1) [
		If (Contains(TexCharsToEscape, x[i]),
			result := result : "\\"
		);
		result := result : x[i];
	];
	result;
];

/* this will escape TeX symbols so that the result can be put into a section heading, i.e. cannot use \verb|| */
HtmlTermHeading(x) := "\\texttt{" : TexEscapeTT(x) : "}";

HtmlBreak() := "
";

Bodied("Item",2);	/* competes with prec. 7 of ":" */
Bodied("Book",60000);
Bodied("Title",60000);
Bodied("Author",60000);
Bodied("Chapter",60000);
Bodied("Section",60000);
Bodied("SubSection",60000);
Bodied("Text",60000);
Bodied("Blurb",60000);
Bodied("DocumentationComment",60000);
Bodied("Itemize",2);
Bodied("Enumerate",2);

TeXFinishUp() := WriteString("
\\end{document}
");

IncludeFile(x) := Load(x);

HtmlLink(text, url, param1, param2) :=
  If (text = url,
	"{\\small \\verb|" : text : "|}",
	text : " (Web URL: {\\small \\verb|" : url :
	  If(param1 != "", "#" : param1, "" )
	: "|})"
);

RuleBase("TeXMath", {x});
RuleBase("TeXMathD", {x});
HoldArg("TeXMath", x);
HoldArg("TeXMathD", x);
/* use <-- since := would redefine everything */
TeXMath(_x) <-- TeXForm(x);
TeXMathD(_x) <-- "$" : TeXForm(x) : "$";

/* stuff for refman */

ChapterIntro(string) := WriteString("
" : string : "
");
Bodied("ChapterIntro", 60000);

CmdDescription(cmd, desc) := WriteString("
\\section{" : HtmlTermHeading(cmd) : " --- " : desc : "}
");

StandardLib() := WriteString("
\\begin{flushright}\\small (standard library)\\end{flushright}
");

UnixSpecific() := WriteString("
\\begin{flushright}\\small (Unix-specific)\\end{flushright}
");

MSWinSpecific() := WriteString("
\\begin{flushright}\\small (MS Windows-specific)\\end{flushright}
");

MacSpecific() := WriteString("
\\begin{flushright}\\small (Macintosh-specific)\\end{flushright}
");

BuiltIn() := WriteString("
\\begin{flushright}\\small (\\textsc{Yacas} internal)\\end{flushright}
");

AddBody(string) := WriteString(string);

// make SeeAlso print "See also" and do not do the Topical thing
SeeAlso(list) := WriteString("
\\begin{flushleft}\\textbf{\\small See also:}
" : PrintList(MapSingle("HtmlTerm", list), ", ")
: "
\\end{flushleft}
");

AddAnchor(string) := "";
HtmlAnchor(string) := "";

Bodied("HtmlAnchor", 60000);
Topical(string) := If(string = "See also:", "",
	WriteString(
"\\begin{flushleft}\\textbf{\\small " : string : "}\\end{flushleft}
")
);
Bodied("Topical",60000);
Blurb(string) := [ True ];	// Blurb() does nothing in TeX mode
Bodied("Blurb",60000);
// special escapes
Gt() := ">";
Lt() := "<";
