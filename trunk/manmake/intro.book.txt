*BLURB 
This document gives a short introduction to Yacas.
Included is a brief tutorial on the syntax and some
commands to get you started using Yacas. There are also some examples.
				Introduction to the off-line version of Yacas

			Getting started with Yacas off-line

		Introduction

This section describes how to get started with {Yacas} locally by downloading and compiling the
program. However, this is not strictly necessary. You can also go online to our web site and
use {Yacas} in there inside your browser. The web page contains tutorials, example calculations 
and lots of documentation. This document is only useful if you plan to build and install {Yacas}
yourself.



		Installing {Yacas}

Read the file {INSTALL} for instructions on how to compile {Yacas}. {Yacas} is
portable across most Unix-ish platforms and requires only a standard C++
compiler such as {g++}.

The base {Yacas} application accepts text as input and returns text as output.
This makes it rather platform-independent. Apart from Unix-like systems, {Yacas} has been
compiled on Windows and on EPOC32, aka Psion (which doesn't come with a standard C++
library!).
The source code to compile {Yacas} for Windows can be found at the
<*Sourceforge repository|http://sourceforge.net/projects/yacas/*>.

For Unix, compilation basically amounts to the standard sequence

	./configure
	make
	make install
This will install the binaries to {/usr/local/bin} and the library files to {/usr/local/share/yacas/}.

*A getting printed manuals
Additionally, $LaTeX$-formatted documentation in PostScript and PDF formats can be produced by the command

	make texdocs

or, alternatively, by passing {--enable-ps-doc} or {--enable-pdf-doc}
to {./configure} when building {Yacas}. In the latter case, the documentation
will be automatically rebuilt every time the documentation changes (which is
useful when maintaining the documentation).

In addition, there is also a Java version of the lower-level interpreter. The code
for this Java version can be found in the directory "JavaYacas", and can be compiled
with the make file "makefile.yacas", by typing in:

	make -f makefile.yacas

The interpreter can then be invoked from the command line
with:

	java -jar yacas.jar

or alternatively it can be invoked as an applet, by opening
yacasconsole.html. 

The binary files that comprise the entire binary release
for the Java version are:

*	1. yacas.jar - the Java class files in one jar file.
*	2. yacasconsole.html - the file that launches the applet.
*	3. hints.txt - the hints that are shown in the applet
(the grey box with commands that match what you are typing in 
at that moment).

The Java version has almost all the features the C++ version
has. In fact, there is no reason the Java version should not
have all the same features. At the time of writing (version 1.0.58),
plugins are not available yet, not all command line arguments
are available yet, and the command line prompt does not have the
history yet.


		Using the console mode

You can run {Yacas} in the console mode simply by typing {yacas}. The {Yacas} command prompt looks like this:
	In>
and {Yacas}'s answers appear after the prompt
	Out>

*A {Exit}
*A {quit}
*A {^}{C}
A {Yacas} session may be terminated by typing {Exit()} or {quit}. Pressing {^}{C}
will also quit {Yacas}; however, pressing {^}{C} while {Yacas} is busy with a
calculation will stop just that calculation. A session can be restarted
(forgetting all previous definitions and results) by typing
*A {restart}
	restart

Typically, you would enter one statement per line, for example

	In> Sin(Pi/2);
	Out> 1;

Statements should end with a semicolon ({;}) although this is not required
in interactive sessions
({Yacas} will append a semicolon at end of line to finish the statement).

*A {Example}
Type {Example();} to get some random examples of {Yacas} calculations.

*A command history
The command line has a history list, so it should be easy to
browse through the expressions you entered previously using the Up and Down arrow keys.

When a few characters have been typed, the command line will use
the characters before the cursor as a filter into the history,
and allow you to browse through all the commands in the history
that start with these characters quickly, instead of browsing through
the entire history. 

*A TAB completion
Typing the first few characters of a previous expression and then
hitting the TAB key makes {Yacas} recall the last expression
in the history list that matches these first characters.

*A multi-line commands
Commands spanning multiple lines can (and actually have to) be entered by using a trailing backslash {\} at end of each continued line. For example:

	In> a:=2+3+
	Error on line 1 in file [CommandLine]
	Line error occurred on:
	>>>
	Error parsing expression

	In> a:=2+3+ \
	In> 1
	Out> 6;
The error after our first attempt occurred because {Yacas} has appended a semicolon at end of the first line and {2+3+;} is not a valid {Yacas} expression.

Incidentally, any text {Yacas} prints without a prompt is either messages printed by functions as their side-effect, or error messages. Resulting values of expressions are always printed after an {Out>}  prompt.





			Examples

This is a small tour of the capabilities {Yacas} currently offers. Note
that this list of examples is far from complete. {Yacas} contains a few
hundred commands, of which only a few are shown here.

Additional example calculations including the results can be found
here:

*	A selection of calculations from the <*Wester benchmark|yacasdoc://essays/2/*>.
*	Some additional <*example calculations|mybench2.html*> that {Yacas} can currently perform.



		Using Yacas from the console

	    Command-line options

*INCLUDE cl-options.chapt

	    Client/server usage

In addition to the interactive console sessions, a remote persistent session facility is provided through the script {yacas_client}.
(This is currently only supported on Unix platforms.)
By means of this script, the user can configure third-party applications to pass commands to a constantly running "{Yacas} server" and get output. The "{Yacas} server" is automatically started by {yacas_client}. It may run on a remote computer; in that case the user should have a user account on the remote computer and privileges to execute {yacas_client} there, as well as {rsh} or {ssh} access. The purpose of {yacas_client} is to enable users to pass commands to {Yacas} within a persistent session while running another application such as a text editor.

*A {yacas_client}
The script {yacas_client} reads {Yacas} commands from the standard input and passes them to the running "{Yacas} server"; it then waits 2 seconds and prints whatever output {Yacas} produced up to this time. Usage may look like this:

	8:20pm Unix>echo "x:=3" | yacas_client
	Starting server.
	True;
	To exit Yacas, enter  Exit(); or quit
	  or Ctrl-c. Type ?? for help.
	Or type ?function for help on a function.
	Type 'restart' to restart Yacas.
	To see example commands, keep typing
	  Example();
	In> x:=3
	Out> 3;
	In> 8:21pm Unix>echo "x:=3+x" | yacas_client
	In> x:=3+x
	Out> 6;
	In> 8:23pm Unix>yacas_client -stop
	In> quit
	Quitting...
	Server stopped.
	8:23pm Unix>

Persistence of the session means that {Yacas} remembered the value of {x} between invocations of {yacas_client}. If there is not enough time for {Yacas} to produce output within 2 seconds, the output will be displayed the next time you call {yacas_client}.

The "{Yacas} server" is started automatically when first used and can be stopped either by quitting {Yacas} or by an explicit option {yacas_client -stop}, in which case {yacas_client} does not read standard input.

The script {yacas_client} reads standard input and writes to standard output, so it can be used via remote shell execution. For example, if an account "user" on a remote computer "remote.host" is accessible through {ssh}, then {yacas_client} can be used remotely, like this:

	echo "x:=2;" | \
	  ssh user@remote.host yacas_client

On a given host computer running the "{Yacas} server", each user currently may have only one persistent {Yacas} session.


*INCLUDE config.chapt

*INCLUDE addons.chapt

*INCLUDE plugin-docs.chapt

*REM GNU Free Documentation License
*INCLUDE FDL.chapt
