
				Proteus user interface manual

			Hand-writing a notepad

Important note: the notepad functionality discussed in
this chapter only partially implemented. It is a design,
and specifies how this feature <i>will</i> work when it is
finished.

		Introduction

Proteus comes with a facility to load "scripted" note pads.
These can be hand-written. The scripted note pads are just
Yacas scripts that get executed, and that can build up the
notepad by adding functionality.

This section describes how to go about writing your own
notepads, and the commands that can be used to build
up a custom user interface for a calculation.

The commands that are specific to building a notepad
all start with {Proteus'}.

A notepad takes the form of a Yacas script.


In the file, functions can be defined, global
variables set up, etcetera. It is thus one Yacas expression,
that can be stored in a file. This file can then be loaded
from the user interface, through the "Load" menu item.

The user interface can be set up with special commands. 
The basic command that can be used here is:

	Proteus'AddCommand(CommandString);

The "CommandString" part is inserted into the notepad
as if it had been typed in in the notepad by the user.

A very simple sample notepad could look like this:

	// program part: define a function
	f(x,y):=x^y;

	// user interface part: enter x and y, and evaluate f(x,y)
	Proteus'AddCommand("x:=2");
	Proteus'AddCommand("y:=3");
	Proteus'AddCommand("f(x,y)");


The following sections will discuss the commands that can
be used to customize the notepad further, expanding it into
a full user interface for a calculation or excercise for
students.


		Notepad manipulation commands: adding lines to the
note pad


The commands that can be used to add lines to the notepad are:

	Proteus'AddCommand(CommandString);

{Proteus'AddCommand} allows adding a simple command
as if it was entered by the user.

	Proteus'AddCommandExecuted(CommandString,SideEffect,Result);

{Proteus'AddCommandExecuted} allows specification of
the side effect and result of executing the command. This
is useful if the command takes a long time to execute.
The result one would have gotten from executing it
can be passed along too. "CommandString" will not be
executed, but the "SideEffect" will, and the "Result"
will be shown. This command can be used to speed up
loading if loading takes too much time due to one
command taking a lot of time.

	Proteus'AddLink(CommandString,LinkText,ShowPrompt,EnablePrompt);

{Proteus'AddLink} adds a line without output, and
for which "CommandString" is not executed initially.
The "LinkText" item can be a multi-line text field
that is displayed. This can be used to place normal
text in the notepad, but also for instance links to
other notepads. It basically allows executing actions
that don't have an output.

"ShowPrompt" and "EnablePrompt" can have the values:

*	1. Both {False}: Flat text
*	1. "ShowPrompt" {False} and "EnablePrompt" {True}: A <i>link</i>, 
something that is executed when you click on it. The result is replaced
with the result returned by evaluating the "CommandString". This can be used
for linking to other notepads.




		State-changing commands

There are some commands that affect the following
lines added to the notepad. For instance, the font
type, color and size could be changed.

	Proteus'FontSize(Size)
	Proteus'FontColor(Color)
	Proteus'FontType(Type)

The font size is in pixels. The values for "Color" and
"Type" are discussed in the graphics capabilities
section.

		Commands not implemented yet


	Proteus'Command(CommandString)

{Proteus'Command} allows changing the way an expression gets
evaluated. An expression can be entered in CommandString, where
a {$} is replaced with the expression entered in the cell.
The default is {Proteus'Command("$");}.

Example: one cell could assign a value to a variable, by

	Proteus'AddCommand("a:=2");

But alternatively, the following could be entered:

	Proteus'Command("a:=$");
	Proteus'AddCommand("2");
	Proteus'Command("$");

In that case, only "2" needs to be entered in the cell, and it will
automatically
be assigned to {a}.


*REM Default state prior to loading a notepad





	Proteus'Notepad(
	[
	  f(x,y):=2;
	],
	[
	  Proteus'Prompt("In> ");
	  Proteus'Command("$");
	  Proteus'Font(Black+Bold);
	  Proteus'AddLink("True","This could be an example note pad");
	  Proteus'Font(Red);
	  Proteus'AddCommand("2");
	  Proteus'AddCommand("Echo(\"\");");
	  Proteus'AddCommand("4");
	  Proteus'Image("example01.gif");
	  Proteus'AddCommand("Taylor(x,0,5)Sin(a*x)",True,x+x^3/6);
	  Proteus'Command("a:=($)");
	  Proteus'Prompt("a := ");
	  Proteus'PrettyPrinter("ProteusePP");
	  Proteus'AddCommandExecuted("Taylor(x,0,5)Sin(a*x)",x+x^3/6,x+x^3/6);
	  Proteus'Prompt("In> ");
	  Proteus'Command("$");
	  Proteus'Font(Green);
	  Proteus'AddLink("restart","Leave this note pad");
	  // One more, being able to assign names to lines, and
	  // set results in other lines based on some other calculation.
	]);



			Graphics capabilities

Graphics can be scripted in Yacas script. There are hooks
into the system allowing for drawing text and lines, and
changing colors and fonts and font sizes and such.

		Inserting a graph into a notepad

One command, {FlGraphStart}, allows for inserting a graph
into the notepad. The syntax is:

	FlGraphStart(Expression,Width,Height);

"Expression" gets executed whenever the graph needs
to be drawn. "Expression" can then use other graphics
commands to draw it.

The graphics commands currently supported are directly
linked to the drawing commands defined by {fltk}.
The command set would be different for different
widget sets. This is not a problem, since a script
can be written to generate an expression that 
renders a graph.

For efficient rendering, it is best to do as many
calculations as possible <i>before</i> the
call to {FlGraphStart}, so that "Expression" only
contains simple calls to the functions that do the drawing.

		Graphing functions

The fltk functions linked in to the executable
that call {fltk} drawing functions are listed
here. Please refer to the {fltk} documentation
for further explanation.

*INCLUDE fltkgraphstub.man



