
Use("coeffguess");

10 # Alt(n_IsEven) <-- (-1)^(n/2);
20 # Alt(n_IsInteger) <-- 0;

/* Taylor for -Exp(-(x^2)) */
Effic(_n) <-- (Alt(n)/((n >> 1)!));

Single(i_IsInteger,n_IsInteger) <-- If(i = n,1,0);

/*
 *  D(2,x)psi - Exp(-x^2)*psi = E * psi
 *
 * (experimental)
 */
CofDoEffic(_deg,_dim)<--
[
  CofDegree(deg);
  CofDim(dim);
  psi:=MakeCof();
  potential:= MakeCof(-1*Multiplex("Effic","*",1));
  CofEq(DerivCofAll2(psi) +MakeCofM(potential,psi) - CofMul(E,psi));
];


/*
 * The Yukawa potential (goes to electrostatic potential for a to infinity)
 *
 *  (Exp(-a*((x^2)^(1/2)))-1)/((x^2)^(1/2))
 *  -1*(-1)^n*a^(n+1)/((n+1)!)
*/
Yukawa(_n) <-- (-1*(-1)^n*a^(n+1)/((n+1)!));
CofDoYukawa(_deg,_dim)<--
[
  CofDegree(deg);
  CofDim(dim);
  psi:=MakeCof();
  potential:= MakeCof(-1*Multiplex("Yukawa","*",1));
  CofEq(DerivCofAll2(psi) +MakeCofM(potential,psi) - CofMul(E,psi));
];


/*
 *  D(2,x)psi + E * psi = 0
 *
 * (solutions are sin,cos)
 */
CofDoHarmonic(_deg,_dim)<--
[
  CofDegree(deg);
  CofDim(dim);
  psi:=MakeCof();
  CofEq(DerivCofAll2(psi) - CofMul(E,psi));
];

/*
 *  D(1,x)psi = E * psi
 *
 * (solution is Exp(x)-like)
 */
CofDoDiffuse(_deg,_dim)<--
[
  CofDegree(deg);
  CofDim(dim);
  psi:=MakeCof();
  CofEq(DerivCofAll1(psi) - CofMul(E,psi));
];


Single1(_n) <-- Single(1,n);
Single2(_n) <-- Single(2,n);
/*
 *  D(2,x)psi + x^2 * psi  = E * psi 
 */
CofDoXsqr(_deg,_dim)<--
[
  CofDegree(deg);
  CofDim(dim);
  psi:=MakeCof();
  potential:= MakeCof(Multiplex("Single2","+",0));
  CofEq(DerivCofAll2(psi) +MakeCofM(potential,psi) - CofMul(E,psi));
];

/*
 *  D(1,x)psi + x * psi  = E * psi
 *
 * (for E=0 the solution is Exp(-x^2/2)
 */
CofDoNormal(_deg,_dim)<--
[
  CofDegree(deg);
  CofDim(dim);
  psi:=MakeCof();
  potential:= MakeCof(Multiplex("Single1","+",0));
  CofEq(DerivCofAll1(psi) +MakeCofM(potential,psi) - CofMul(E,psi));
];



CofPlot()<--
[
  Local(applied,E,f);
  Apply("GnuPlot",{-3,3,20,{CofT()}});
  Echo({"solution is ",CofT()});
  E:=CofFindE();
  f:=E*CofT();
  applied:=CofT(CofMap(CofTaylor(cofeq + CofMul(E,psi),cofdegree)));
  applied:=BigOh(applied,x,cofdegree);
  Apply("GnuPlot",{-3,3,20,{f,applied}});
];



/*
CofDoDiffuse(10,1);
CofSetUp({aS0==1,aS1==1,E==1});
*/


CofDoHarmonic(12,1);
CofSetUp({aS0==0,aS1==1,aS3== -1/6});

/*
CofDoXsqr(12,1); 
CofSetUp({aS0==1,aS1==2,aS5==1});
*/

/*
CofDoNormal(20,1);
CofSetUp({aS0==1,aS1==0,E == 0});
*/
CofSolve();
CofPlot();


