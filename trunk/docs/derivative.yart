{{title:Fun with derivatives part 1: defining the concept of a derivative in <i>Yacas</i>:title}}

This is the first article in a series of articles on doing calculations involving derivatives in <i>Yacas</i>. Defining a function that can determine the derivative of a function has been a classic example of something you can do easily in languages similar to <i>Yacas</i>, and provides a good starting point to show off the capabilities <i>Yacas</i> has with respect to defining transformation rules.

You need surprisingly few lines of code to actually define the operation of taking a derivative. We will develop the code that can be used in <i>Yacas</i> in this article for instructional purposes. <i>Yacas</i> naturally already knows how to take the derivative of a function. One can take a derivative through the {{expr:D:expr}} function. But it is still a good example that demonstrates how to use transformation rules in <i>Yacas</i>, as very few lines of code are needed and most people readily know the transformation rules by heart (the transformation rules lend themselves quite well to implementation in a computer program). It is also an example of a function where the answer is not a number but a more complex thing, another function.

We will define the function dd, which will take two arguments. The first is the variable, the second the function to take the derivative off (with respect to the variable given as first argument).

First we can tell the system that taking the derivative of a variable with respect to itself yields one, 

{{math:
\frac{d}{dx} x = 1
:math}}

or in code:

{{code:
dd(_x,_x) <-- 1;
:code}}
The pattern on the left side has two matchable places named {{expr:_x:expr}}. This instructs <i>Yacas</i> to check that they are the same.

Next we tell the system that if you take a derivative of a function with respect to a variable that that function does not depend on, the result is zero. 

Taking the derivative of an expression {{expr:y:expr}} with respect to {{expr:x:expr}} would yield the result zero, assuming that {{expr:y:expr}} does not depend on {{expr:x:expr}}, or:

{{math:
\frac{d}{dx} y = 0
:math}}

and in code:

{{code:
dd(_x,y_IsFreeOf(x)) <-- 0;
:code}}
Note the construct {{expr:y_IsFreeOf(x):expr}}. <i>Yacas</i> internally transforms that construct to mean {{expr:IsFreeOf(x,y):expr}}. So this pattern matches only if the expression to take the derivative off does not depend on the variable to take the derivative with respect of. The result is zero in that case.

Taking derivatives is a linear operation. The derivative of an expression that adds two expressions is the derivative of the one plus the derivative of the other. This is summarized in the following rules:

{{math:
\frac{d}{dx} \left( a + b \right) = \frac{d}{dx} a + \frac{d}{dx} b
:math}}
{{math:
\frac{d}{dx} \left( a - b \right) = \frac{d}{dx} a - \frac{d}{dx} b
:math}}

or in code:

{{code:
dd(_x,_a + _b)  <-- dd(x,a)+dd(x,b);
dd(_x,_a - _b)  <-- dd(x,a)-dd(x,b);
dd(_x,   - _b)  <--        -dd(x,b);
:code}}

Taking the derivative of a function to the power of a constant is also a well-known transform. 

{{math:
\frac{d}{dx} x ^ n = n x ^ \left( n - 1 \right)
:math}}

if n does not depend on x.

Most transformation rules given here can be generalized by applying the chain rule: 

{{math:
\frac{d}{dx} f \left( g \left( x \right) \right) = \frac{d f \left( g \left( x \right) \right) }{dg \left( x \right) } \frac{d g \left( x \right) } {dx}
:math}}

We will embed the chain rule within the transformation rules.

{{code:
dd(_x,_y ^ z_IsFreeOf(x)) <-- dd(x,y)*z*y^(z-1);
:code}}
Taking the derivative of an expression that consists of one expression multiplied by the other also has a commonly known transformation rule:

{{math:
\frac{d}{dx} \left( a b \right) = a \frac{d}{dx} b + b \frac{d}{dx} a
:math}}

or in code:
{{code:
dd(_x,_a * _b)  <-- a*dd(x,b)+dd(x,a)*b;
:code}}
And so does division:

{{math,heightPixels.120:
\frac{d}{dx} \left( \frac y z \right) = \frac{z \frac{d}{dx} y - y \frac{d}{dx} z}{z ^ 2}
:math}}

{{code:
dd(x,_y / _z) <-- (z*dd(x,y)-y*dd(x,z))/z^2;
:code}}
Finally we add the derivatives of a few well-known analytic functions:

{{math:
\frac{d}{dx} sin x = cos x
:math}}

{{math:
\frac{d}{dx} cos x = - sin x
:math}}

{{math:
\frac{d}{dx} e ^ x = e ^ x
:math}}

{{math:
\frac{d}{dx} \sqrt x = \frac{1}{2 \sqrt x}
:math}}



and in code:

{{code:
dd(_x,Sin(_y)) <--  dd(x,y)*Cos(y);
dd(_x,Cos(_y)) <-- -dd(x,y)*Sin(y);
dd(_x,Exp(_y)) <--  dd(x,y)*Exp(y);
dd(_x,Sqrt(_y)) <-- dd(x,y)/(2*Sqrt(y));
:code}}
This list can be expanded further of course.

For convenience we also defined a function {{expr:dd(x,n,f):expr}}, which takes the derivative of {{expr:f:expr}} with respect to {{expr:x:expr}} {{expr:n:expr}} times. The function calls itself {{expr:n:expr}} times recursively until {{expr:n:expr}} is zero (in which case it returns the expression unchanged).

{{code:
dd(_x,0,_f) <-- f;
dd(_x,n_IsPositiveInteger,_f) <-- dd(x,n-1,dd(x,f));
:code}}

If you click on the button labeled "Try out" above this text you will be directed to the <i>Yacas</i> calculation center. Here you can try out the function {{expr:dd(x,f):expr}} that is developed here. Clicking on the button labeled "Example" will result in a pre-determined example being typed in for you. The "Edit" button allows you to edit the code, modifying it before re-running the code.

There are sometimes different ways of representing the same result. Compare for example the result of calculating {{expr:dd(x,n,Sqrt(x)):expr}} with {{expr:dd(x,n,x^0.5):expr}} (we use {{expr:0.5:expr}} here and not {{expr:(1/2):expr}}, because <i>Yacas</i> does some standard simplifications, one of which is converting {{expr:x^(1/2):expr}} to {{expr:Sqrt(x):expr}}, something we don't want for this example). The length of the one result is much longer than the other, although mathematically they are identical. 


{{example: dd(x,x) :example}}
{{example: dd(x,Sin(x)) :example}}
{{example: dd(x,x-1) :example}}
{{example: dd(x,a) :example}}
{{example: dd(x,a*x) :example}}
{{example: dd(x,a*x^2) :example}}
{{example: dd(x,Sin(x)+x) :example}}
{{example: dd(x,a*x^n) :example}}
{{example: dd(x,Sin(a*x)) :example}}
{{example: dd(x,1-a*x^Sqrt(2)) :example}}
{{example: dd(x,Exp(1+Sin(a*x))) :example}}

{{test:
Verify(dd(x,x),1);
Verify(dd(x,Sin(x)),Cos(x));
Verify(dd(x,a),0);
:test}}


