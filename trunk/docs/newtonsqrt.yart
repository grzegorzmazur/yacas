
{{title:Fun with derivatives part 4: Newton iteration to determine the inverse square root:title}}

I got the inspiration for this example from reading about the optimized code used in Quake to calculate
the inverse square root, or, to calculate:

{{math:
y = \frac{1}{\sqrt{x}}
:math}}

A good article on the subject can also be found <a href="http://betterexplained.com/articles/understanding-quakes-fast-inverse-square-root/">here</a>.

This trick applies Newtons iteration method to arrive at the answer. For that we have to formulate it so we can try to find a zero. We begin with 
an initial estimate, y0, and define an error function 

{{math:
error \left( y \right) = \frac{1}{y^2} - x
:math}}

Seeing as 

{{math:
y^2 = \frac{1}{x}
:math}}

and thus

{{math:
\frac{1}{y^2} = x
:math}}

so the closer {{expr:y:expr}} is to the solution the smaller the error function will be, going to zero as y goes to the inverse square root of x.

Using the newton iteration step:

{{math,heightPixels.180:
y_1 = y_0 + \frac{error \left( y_0 \right) }{ \left[ \frac{d error \left( y_0 \right) }{dy_0}  \right] }
:math}}

You can try to use <i>Yacas</i> yourself to arrive at the following result:

{{math,heightPixels.120:
y_1 = \frac{3 y_0 - y_0^3 x}{2}
:math}}

This can be applied repeatedly of course to arrive at better approximations. We will not go in to the specifics
of optimizing this further to run on a computer (although it is an interesting subject! See the link given above
for more information), we will put the iteration in motion here. 

If you go to the calculation center by pressing the "Run" button, the code below will
immediately run, and try to approximate {{expr:1/Sqrt(2):expr}} iteratively. You will again see it converge exponentially,
as this time the number of digits precision doubles with each iteration.

{{code,article.true:
answer := N(1/Sqrt(2),100);
Echo("1/Sqrt(2) = ",answer);
iterate():=
[
  y := N((3*y-y^3*2)/2,100);
  Echo("The new approximation is ",y);
  Echo("The number of digits precision is ",-N(Ln(Abs(y-answer))/Ln(10),100));
];

y := 1;
For (i:=1,i<=8,i++) iterate();

:code}}


