# Process this file with autoconf to produce a configure script.
AC_INIT(src/yacasmain.cpp)
AM_CONFIG_HEADER(config.h)

PACKAGE=yacas
MAJOR=1
MINOR=0
MICRO=55
RELEASE=1

VERSION=$MAJOR.$MINOR.$MICRO
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AC_SUBST(RELEASE)

# Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX

AC_CHECK_PROG(have_perl, perl, yes, no)
AC_CHECK_PROG(have_latex, latex, yes, no)
AC_CHECK_PROG(have_makeindex, makeindex, yes, no)
AC_CHECK_PROG(have_pdflatex, pdflatex, yes, no)
AC_CHECK_PROG(have_dvips, dvips, yes, no)
AC_CHECK_PROG(have_gzip, gzip, yes, no)
AC_CHECK_TOOL(AR, ar, :)

if test "$AR" = ":"; then
  AC_MSG_ERROR([The tool 'ar', required for compilation, was not found.])
fi

# If using GNU compilers, use extra flags to get warnings
if test "$GCC" = yes; then
  CFLAGS="$CFLAGS -Wall -pedantic"
fi;
if test "$GXX" = yes; then
  CXXFLAGS="$CXXFLAGS -Wall -pedantic"
fi;

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h sys/ioctl.h sys/socket.h sys/time.h sys/types.h)
AC_CHECK_HEADERS(malloc.h memory.h stdlib.h stdio.h ctype.h dlfcn.h dl.h dld.h)
AC_CHECK_HEADERS(dirent.h math.h stdarg.h signal.h)
AC_CHECK_HEADERS(string.h strings.h, break)


# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

# Checks for library functions.
AC_CHECK_FUNCS(select socket strtod strchr vsnprintf)

# Check type of signal handler
AC_MSG_CHECKING([type of argument of signal handler])
AC_CACHE_VAL(ac_cv_sighandler_arg,dnl
             [ ac_not_found=yes

               cat > conftest.cpp <<EOF
#include <signal.h>
void handler(int foo) {return;}
int main(int argc, char** argv) {signal(SIGKILL,handler); return 0;}
EOF
               if ${CXX-g++} -c $CXXFLAGS $CPPFLAGS conftest.cpp 2>&5; then
                  ac_cv_sighandler_arg=int
	          ac_not_found=no
               fi
               rm conftest.cpp

	       if test "$ac_not_found" = yes; then
                  cat > conftest.cpp <<EOF
#include <signal.h>
void handler(void) {return;}
int main(int argc, char** argv) {signal(SIGKILL,handler); return 0;}
EOF
                  if ${CXX-g++} -c $CXXFLAGS $CPPFLAGS conftest.cpp 2>&5; then
                     ac_cv_sighandler_arg=void
		     ac_not_found=no
                  fi
                  rm conftest.cpp
               fi
             ])
if test "$ac_not_found" = yes; then
   ac_cv_sighandler_arg=int
fi
AC_MSG_RESULT([$ac_cv_sighandler_arg])
if test "$ac_cv_sighandler_arg" = void; then
   AC_DEFINE(SIGHANDLER_NO_ARGS,, [Define if signal hander as set by signal() has no arguments])
fi

# Define PLATFORM_OS to be the Operating System
AC_CANONICAL_HOST
AC_DEFINE_UNQUOTED(PLATFORM_OS, "$host_os", [Operating system])

# specifically for macosx
case "$host_os" in
     darwin*) 
     AC_DEFINE(MACOSX, 1, [Define if workarounds are needed for MacOS X])
     MACOSX="yes"
     ;;
esac
AM_CONDITIONAL(MACOS_REZ, test -n "$MACOSX")


# Check for the existence of the Gnu Scientific Library on this machine
AM_PATH_GSL(0.0, HAVE_GSL=yes, HAVE_GSL=no)
# The first argument of AM_PATH_GSL is the minimum version we require
if test "$HAVE_GSL" = "yes" ; then
	GSL_PLUGIN=yacas_gsl.la
else
	AC_MSG_WARN([Not building GNU Scientic Library (GSL) plugin])
	AC_MSG_WARN([because the library was not found.])
fi
AM_CONDITIONAL(BUILD_GSL_PLUGIN, test -n "$GSL_PLUGIN")
AC_SUBST(GSL_PLUGIN)

# Check for OpenGL library
MDL_HAVE_OPENGL
AM_CONDITIONAL(BUILD_OPENGL_PLUGIN, test -n "$GL_LIBS")
if test -n "$GL_LIBS"; then
	OPENGL_PLUGIN=opengl.la
	AC_CHECK_HEADERS(GL/glut.h)
else
	AC_MSG_WARN([Not building the OpenGL plugin])
	AC_MSG_WARN([because the library was not found.])
fi
AC_SUBST(OPENGL_PLUGIN)

# Choice of arbitrary precision library
AC_ARG_WITH(numlib, [  --with-numlib=LIB       select library for arbitrary precision arithmetics
                             Options: native, gmp.  [default=native]], with_numlib=$withval, with_numlib="native")
AC_MSG_CHECKING([which arbitrary precision library to use])
case $with_numlib in
  native) 
    NUMBERS_LIB="libyacasnumbers.la"
    NUMBERS_LIB_SHORT="yacasnumbers"
    NUMBERS_LDFLAGS="-lm"
    AC_MSG_RESULT(native);;
  gmp)
    AC_MSG_RESULT(gmp)
    AC_CHECK_LIB(gmp, __gmpz_init, have_gmp=yes, have_gmp=no)
    if test "$have_gmp" = "no" ; then
      AC_MSG_ERROR([GNU MP library not found])
    fi
    NUMBERS_LIB="libgmpnumbers.la"
    NUMBERS_LIB_SHORT="gmpnumbers"
    NUMBERS_LDFLAGS="-lgmp -lm"
    AC_DEFINE(USE_GMP,, [Define to use the GNU MP library]);;
  yes)
    AC_MSG_RESULT(error)
    AC_MSG_ERROR([Arbitrary precision library not specified]);;
  *)
    AC_MSG_RESULT(error)
    AC_MSG_ERROR([Argument of --with-numlib ($with_numlib) not recognized]);;
esac
AC_SUBST(NUMBERS_LIB)
AC_SUBST(NUMBERS_LIB_SHORT)
AC_SUBST(NUMBERS_LDFLAGS)

#Support for proteus builds
AC_ARG_ENABLE(proteus, [   --enable-proteus       build the fltk-based proteus GUI, fltk development libs required, [default=no]],, enable_proteus=no)
AC_MSG_CHECKING([whether to build proteus])
AC_MSG_RESULT($enable_proteus)

if test "$enable_proteus" = "yes" ; then
   AC_MSG_CHECKING([for fltk development library])
   AC_PATH_PROG(FLTKCONFIG,fltk-config)
   if test -n "$FLTKCONFIG"; then
      FLTK_LIBS="`fltk-config --ldflags`"
      FLTK_INCS="`fltk-config --cxxflags`"
      AC_DEFINE([HAVE_LIBFLTK],,[Can compile Proteus])
    else
      AC_MSG_ERROR(FLTK not available, so proteus cannot be built)
    fi
fi
AM_CONDITIONAL(BUILD_PROTEUS, test x$enable_proteus = xyes)
AC_SUBST(FLTK_LIBS)
AC_SUBST(FLTK_INCS)
AC_SUBST(BUILD_PROTEUS)



# Support for the debug version
AC_ARG_ENABLE(debug, [  --enable-debug          build the debug version [default=no]])
AC_MSG_CHECKING([whether to build the debug version])
AC_MSG_RESULT($enable_debug)
if test "$enable_debug" = "yes" ; then
  AC_DEFINE(YACAS_DEBUG,, [Define to build the debug version])
  AC_DEFINE(USE_ASSERT,, [Define to build the debug version])
fi

# Support for the network server version
AC_ARG_ENABLE(server, [  --enable-server         build the network server version [default=no]])
AC_MSG_CHECKING([whether to enable the server mode])
AC_MSG_RESULT($enable_server)
if test "$enable_server" = "yes" ; then
  AC_FUNC_ACCEPT_ARGTYPES
  AC_DEFINE(SUPPORT_SERVER,, [Define to build the network server version])
fi

# Generate HTML documentation?
AC_ARG_ENABLE(html-doc, [  --disable-html-doc      do not generate HTML documentation [default=enable]])
if test "x$enable_html_doc" = x; then
	enable_html_doc=$have_perl
	if test "x$have_perl" = xno; then
		AC_MSG_WARN([
		Perl was not found. Therefore, the generation of 
		HTML documentation has been disabled.])
	fi
elif test "x$enable_html_doc" = xyes; then
	if test "x$have_perl" = xno; then
		AC_MSG_ERROR([
		Generation of HTML documentation was explicitly 
		requested. However, this requires Perl, which
		was not found.])
	fi
fi
if test "x$enable_html_doc" = xyes; then
	BOOKS_HTML=manicon.html
	INSTALL_HTML=install-html
fi
AC_SUBST(BOOKS_HTML)
AC_SUBST(INSTALL_HTML)

# Generate PS documentation?
AC_ARG_ENABLE(ps-doc, [  --enable-ps-doc         generate PostScript documentation [default=no]])
if test "x$enable_ps_doc" = xyes; then
	if test "x$have_perl" = xno || test "x$have_latex" = xno \
	   || test "x$have_makeindex" = xno || test "x$have_dvips" = xno \
	   || test "x$have_gzip" = xno; then
		AC_MSG_ERROR([need perl, latex, makeindex, dvips, and gzip to generate Postscript])
	fi
	PS_DOCS=ps-docs
	INSTALL_PS=install-ps
fi
AC_SUBST(PS_DOCS)
AC_SUBST(INSTALL_PS)

# Generate PDF documentation?
AC_ARG_ENABLE(pdf-doc, [  --enable-pdf-doc        generate PDF documentation [default=no]])
if test "x$enable_pdf_doc" = xyes; then
	if test "x$have_perl" = xno || test "x$have_pdflatex" = xno \
	   || test "x$have_makeindex" = xno || test "x$have_dvips" = xno; then
		AC_MSG_ERROR([need perl, pdflatex, and makeindex to generate PDF docs])
	fi
	PDF_DOCS=pdf-docs
fi
AC_SUBST(PDF_DOCS)

# Generate and install library archive?
AC_ARG_ENABLE(archive, [  --enable-archive        generate library archive [default=no]])
if test "x$enable_archive" = xyes; then
	COMPRESSOR_PRG=compressor
	SCRIPTS_DAT=scripts.dat
	CHECK_ARCHIVE=check-archive
	INSTALL_ARCHIVE=install-archive
fi
AC_SUBST(COMPRESSOR_PRG)
AC_SUBST(SCRIPTS_DAT)
AC_SUBST(CHECK_ARCHIVE)
AC_SUBST(INSTALL_ARCHIVE)

# Choice of directories
AC_ARG_WITH(script-dir, [  --with-script-dir=DIR   program scripts in DIR [DATADIR/yacas]])
if test -n "$with_script_dir" ; then
	scriptdir=$with_script_dir
else
	scriptdir=${datadir}/yacas/
fi
AC_SUBST(scriptdir)

AC_ARG_WITH(html-dir, [  --with-html-dir=DIR     HTML documentation in DIR [SCRIPTDIR/documentation]])
if test -n "$with_html_dir" ; then
	htmldir=$with_html_dir
else
	htmldir=${scriptdir}/documentation/
fi
AC_SUBST(htmldir)

AC_ARG_WITH(ps-dir, [  --with-ps-dir=DIR       PostScript documentation in DIR [HTMLDIR]])
if test -n "$with_ps_dir" ; then
	psdir=$with_ps_dir
else
	psdir=${htmldir}
fi
AC_SUBST(psdir)

dnl jb_PREFIX_EXPAND(VARNAME)
dnl -------------------------
dnl Expand $prefix and $exec_prefix in $VARNAME and assign the
dnl result to jb_expanded_VARNAME.
dnl
dnl Written by Alexandre Duret-Lutz
dnl Adapted from AC_DEFINE_DIR by Alexandre Oliva
dnl See http://www.geocrawler.com/archives/3/402/2001/12/0/7416783/
AC_DEFUN([jb_PREFIX_EXPAND],[
        jb_expanded_$1=`(
            test "x$prefix" = xNONE && prefix="$ac_default_prefix"
            test "x$exec_prefix" = xNONE && exec_prefix="${prefix}"
            eval echo \""[$]$1"\"
        )`])

jb_PREFIX_EXPAND([scriptdir])
jb_PREFIX_EXPAND([libdir])

AC_DEFINE_UNQUOTED(SCRIPT_DIR, "$jb_expanded_scriptdir", [ Directory in which scripts are installed ])
AC_DEFINE_UNQUOTED(PLUGIN_DIR, "$jb_expanded_libdir/$PACKAGE", [ Directory in which plugins are installed ])
               
# libtool support
# ---------------

# Configure libltdl:
AC_CONFIG_SUBDIRS(libltdl)
# Search for dlopen():
AC_LIBTOOL_DLOPEN
# Build libltdl as convenience library:
AC_LIBLTDL_CONVENIENCE
# Configure libtool:
AM_PROG_LIBTOOL
# Substitute INCLTDL and LIBLTDL in the Makefiles
# (INCLDT lists include flags for the compiler,
#  LIBLDT lists libraries to link in for the linker)
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)

# All done
AC_OUTPUT(yacas.spec
	Makefile
	docs/Makefile
	inprogress/Makefile
	proteus/Makefile
	YacasNotebook/Makefile
	essays/Makefile
	plugins/Makefile
	plugins/example/Makefile
	plugins/forth/Makefile
	plugins/opengl/Makefile
	plugins/yacas_gsl/Makefile
	plugins/pcre/Makefile
	plugins/filescanner/Makefile
	scripts/Makefile
	colorcode/Makefile
	JavaConsole/Makefile
	epoc/Makefile
	tests/Makefile
        manmake/Makefile
        compile/Makefile
        embed/Makefile
	src/Makefile)

