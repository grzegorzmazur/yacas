# Process this file with autoconf to produce a configure script.
AC_INIT(src/yacasmain.cpp)
AM_CONFIG_HEADER(config.h)

PACKAGE=yacas
MAJOR=1
MINOR=0
MICRO=53rev5
RELEASE=1

VERSION=$MAJOR.$MINOR.$MICRO
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AC_SUBST(RELEASE)

# Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX


AC_CHECK_PROG(have_perl, perl, yes, no)
AC_CHECK_PROG(have_latex, latex, yes, no)
AC_CHECK_PROG(have_makeindex, makeindex, yes, no)
AC_CHECK_PROG(have_pdflatex, pdflatex, yes, no)
AC_CHECK_PROG(have_dvips, dvips, yes, no)
AC_CHECK_PROG(have_gzip, gzip, yes, no)

# libtool support
#AC_LIBTOOL_DLOPEN




# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h sys/ioctl.h sys/socket.h sys/time.h sys/types.h)
AC_CHECK_HEADERS(malloc.h memory.h stdlib.h stdio.h ctype.h dlfcn.h dl.h dld.h)
AC_CHECK_HEADERS(dirent.h)
AC_CHECK_HEADERS(string.h strings.h, break)


# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

# Checks for library functions.
AC_CHECK_FUNCS(select socket strtod strchr)

# checks for libraries
AC_CHECK_LIB(dl,dlopen,LIBS="$LIBS -ldl -rdynamic",,-rdynamic)


# check for the existence of the Gnu Scientific Library on this machine
AC_CHECK_LIB(m,main)
AC_CHECK_LIB(gslcblas,main)
AC_CHECK_LIB(gsl,main)


# Choice of arbitrary precision library
AC_ARG_ENABLE(gmp, [  --enable-gmp            use GNU MP [default=no]])
AC_MSG_CHECKING([which arbitrary precision library to use])
if test "$enable_gmp" = "yes" ; then
	AC_MSG_RESULT(gmp)
	AC_CHECK_LIB(gmp, __gmpz_init, have_gmp=yes, have_gmp=no)
	if test "$have_gmp" = "no" ; then
		AC_MSG_ERROR([GNU MP library not found])
	fi
	NUMBERS_LIB="libgmpnumbers.la"
	NUMBERS_LDFLAGS="-lgmp -lm"
	NUMBERS_CFLAGS="-DUSE_GMP"
else
	NUMBERS_LIB="libyacasnumbers.la"
	NUMBERS_LDFLAGS="-lm"
	NUMBERS_CFLAGS=""
	AC_MSG_RESULT(internal)
fi
AC_SUBST(NUMBERS_LIB)
AC_SUBST(NUMBERS_LDFLAGS)
AC_SUBST(NUMBERS_CFLAGS)

AC_ARG_ENABLE(debug, [  --enable-debug          build the debug version [default=no]])
AC_MSG_CHECKING([whether to build the debug version])
AC_MSG_RESULT($enable_debug)
if test "$enable_debug" = "yes" ; then
  DEBUG_FLAGS="-DYACAS_DEBUG -DUSE_ASSERT"
else
  DEBUG_FLAGS=""
fi
AC_SUBST(DEBUG_FLAGS)


AC_ARG_ENABLE(server, [  --enable-server         build the network server version [default=no]])
AC_MSG_CHECKING([whether to enable the server mode])
AC_MSG_RESULT($enable_server)
if test "$enable_server" = "yes" ; then
  AC_FUNC_ACCEPT_ARGTYPES
  SERVER_FLAGS="-DSUPPORT_SERVER"
else
  SERVER_FLAGS=""
fi
AC_SUBST(SERVER_FLAGS)


# Generate HTML documentation?
AC_ARG_ENABLE(html-doc, [  --disable-html-doc      do not generate HTML documentation [default=enable]])
if test "x$enable_html_doc" = x; then
	enable_html_doc=$have_perl
	if test "x$have_perl" = xno; then
		AC_MSG_WARN([
		Perl was not found. Therefore, the generation of 
		HTML documentation has been disabled.])
	fi
elif test "x$enable_html_doc" = xyes; then
	if test "x$have_perl" = xno; then
		AC_MSG_ERROR([
		Generation of HTML documentation was explicitly 
		requested. However, this requires Perl, which
		was not found.])
	fi
fi
if test "x$enable_html_doc" = xyes; then
	BOOKS_HTML=books.html
	INSTALL_HTML=install-html
fi
AC_SUBST(BOOKS_HTML)
AC_SUBST(INSTALL_HTML)

# Generate PS documentation?
AC_ARG_ENABLE(ps-doc, [  --enable-ps-doc         generate PostScript documentation [default=no]])
if test "x$enable_ps_doc" = xyes; then
	if test "x$have_perl" = xno || test "x$have_latex" = xno \
	   || test "x$have_makeindex" = xno || test "x$have_dvips" = xno \
	   || test "x$have_gzip" = xno; then
		AC_MSG_ERROR([need perl, latex, makeindex, dvips, and gzip to generate Postscript])
	fi
	PS_DOCS=ps-docs
	INSTALL_PS=install-ps
fi
AC_SUBST(PS_DOCS)
AC_SUBST(INSTALL_PS)

# Generate PDF documentation?
AC_ARG_ENABLE(pdf-doc, [  --enable-pdf-doc        generate PDF documentation [default=no]])
if test "x$enable_pdf_doc" = xyes; then
	if test "x$have_perl" = xno || test "x$have_pdflatex" = xno \
	   || test "x$have_makeindex" = xno || test "x$have_dvips" = xno; then
		AC_MSG_ERROR([need perl, pdflatex, and makeindex to generate PDF docs])
	fi
	PDF_DOCS=pdf-docs
fi
AC_SUBST(PDF_DOCS)

# Generate and install library archive?
AC_ARG_ENABLE(archive, [  --enable-archive        generate library archive [default=no]])
AM_CONDITIONAL(GENERATE_ARCHIVE, test "x$enable_archive" = xyes)

# Choice of directories
AC_ARG_WITH(script-dir, [  --with-script-dir=DIR   program scripts in DIR [DATADIR/yacas]])
if test -n "$with_script_dir" ; then
	scriptdir=$with_script_dir
else
	scriptdir=${datadir}/yacas/
fi
AC_SUBST(scriptdir)

AC_ARG_WITH(html-dir, [  --with-html-dir=DIR     HTML documentation in DIR [SCRIPTDIR/documentation]])
if test -n "$with_html_dir" ; then
	htmldir=$with_html_dir
else
	htmldir=${scriptdir}/documentation/
fi
AC_SUBST(htmldir)

AC_ARG_WITH(ps-dir, [  --with-ps-dir=DIR       PostScript documentation in DIR [HTMLDIR]])
if test -n "$with_ps_dir" ; then
	psdir=$with_ps_dir
else
	psdir=${htmldir}
fi
AC_SUBST(psdir)


# libtool support
# ---------------

# Configure libltdl:
AC_CONFIG_SUBDIRS(libltdl)
# Search for dlopen():
AC_LIBTOOL_DLOPEN
# Build libltdl as convenience library:
AC_LIBLTDL_CONVENIENCE
# Configure libtool:
AM_PROG_LIBTOOL
# Substitute INCLTDL and LIBLTDL in the Makefiles
# (INCLDT lists include flags for the compiler,
#  LIBLDT lists libraries to link in for the linker)
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)

# All done
AC_OUTPUT(yacas.spec
	Makefile
	docs/Makefile
	inprogress/Makefile
	proteus/Makefile
	YacasNotebook/Makefile
	essays/Makefile
	manualmaker/Makefile
	plugins/Makefile
	plugins/example/Makefile
	plugins/forth/Makefile
	plugins/opengl/Makefile
	plugins/yacas_gsl/Makefile
	scripts/Makefile
	colorcode/Makefile
	ramscripts/Makefile
	JavaConsole/Makefile
	epoc/Makefile
	tests/Makefile
        manmake/Makefile
        compile/Makefile
        embed/Makefile
	src/Makefile)
