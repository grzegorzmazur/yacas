This is yacas-notebook.info, produced by makeinfo version 4.0 from
Yacas-NB.texinfo.

   This file documents Yacas-Notebook

   Copyright (C) 1991 Dan Dill, 2000, 2001 Jay Belanger

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the section entitled "GNU General Public License" is included
exactly as in the original, and provided that the entire resulting
derived work is distributed under the terms of a permission notice
identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the section entitled "GNU General Public License"
may be included in a translation approved by the author instead of in
the original English.


File: yacas-notebook.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

`Yacas-Notebook'
****************

   `Yacas-Notebook' is a major mode for Emacs that allows the user to
write documents while interacting with _Yacas_.

* Menu:

* Introduction::
* Cells ::
* Evaluating cells::
* Initialization Cells::
* Referencing Other Cells::
* WEB::
* Miscellaneous::
* Installation::
* Customization::
* Yacas mode::
* Running Yacas Interactively::
* Yacas-Notebook mode commands::
* Yacas mode commands::
* AUCTeX commands::


File: yacas-notebook.info,  Node: Introduction,  Next: Cells,  Prev: Top,  Up: Top

Introduction to `Yacas-Notebook'
********************************

`Yacas-Notebook' is a major mode for Emacs that allows the user to
write documents while interacting with _Yacas_.(1) While the
`yacas-mode' provided by `yacas.el' is designed to help write _Yacas_
programs, `Yacas-Notebook' is designed to help write documents that
include _Yacas_ code.  `Yacas-Notebook' is an extension of the LaTeX
mode provided by AUCTeX(2), and so has the LaTeX mode commands
available.  The resulting document can be run by LaTeX; this requires
putting
     \usepackage{yacas-notebook}

in the preamble.

   ---------- Footnotes ----------

   (1) It was originally base on `EMuPAD', written by the same author,
which in turn was based on previous packages.

   (2) This can be configured so that `Yacas-Notebook' extends the
standard TeX mode provided by Emacs, or just text mode.


File: yacas-notebook.info,  Node: Cells,  Next: Evaluating cells,  Prev: Introduction,  Up: Top

Cells
*****

The basic unit of _Yacas_ code in `Yacas-Notebook' is a "cell".  A cell
consists of text between the delimiters
     \yacas

and
     \endyacas

A cell can be created by typing `C-c C-o'.  (The `C-o' in this case
stands for *o*pening a cell.)  The delimiters will then be placed in
the buffer, and the point will be placed between them.  While in a
cell, the keybindings will mostly be those of `yacas-mode'(1).  *Note
Yacas mode::.

   When working with several cells, you can jump between them by using
`C-c +' to go to the next cell and `C-c -' to go to the previous cell.

   ---------- Footnotes ----------

   (1) The exceptions are the bindings for `yacas-title' and
`yacas-modify', which don't make sense in a cell, and <C-c ?>, which
will give information on `Yacas-Notebook' rather than `yacas-mode'.


File: yacas-notebook.info,  Node: Evaluating cells,  Next: Initialization Cells,  Prev: Cells,  Up: Top

Evaluating cells
****************

The contents of a cell can be sent to a buffer in which _Yacas_ is
running by the command `C-c C-s'.  If a _Yacas_ process isn't running,
one will be started.  (The _Yacas_ process can be killed when desired
by the command `M-C-k'.)  While the cell contents will then be
evaluated, by default you won't be able to see the _Yacas_ buffer.  To
see the _Yacas_ buffer in the bottom half of the window, you can use
the command `C-c C-y'.  To hide the _Yacas_ buffer again, repeat the
command with an argument, `C-u C-c C-y'.  However, `Yacas-Notebook' is
designed to have all of the action take place in the document buffer.
To see the _Yacas_ output in the document buffer, the command `M-x
ynb-get-output' will take the most recent output in the _Yacas_ buffer
and place it in the `Yacas-Notebook' cell, separated from the input by
the marker
     \output

The command `C-c C-v c' will both send the cell to the _Yacas_ buffer
and return the results(1).  To differentiate sin(x^2), for example, type
`D(x)(Sin(x^2));' in a cell:
     \yacas
     D(x)(Sin(x^2));
     \endyacas

After typing `C-c C-v c', it will look like
     \yacas
     D(x)(Sin(x^2));
     \output
                /  2 \
     2 * x * Cos\ x  /
     \endyacas

To delete the output and return the cell to its original form, you can
use the command `C-c C-d'.

   `Yacas-Notebook' mode can take advantage of the fact that _Yacas_
can give its output in LaTeX form.  The command `C-c C-v C' works the
same as `C-c C-v c', except now the output is in LaTeX form, ready to
be formatted by LaTeX.  In general, if `C-c C-v 'LETTER returns _Yacas_
output, then `C-c C-v 'CAPITAL LETTER will return the output in TeX
form.  The above cell would become
     \yacas
     D(x)Sin(x^2);
     \outputtex
     2 x \left( \cos x ^{2}\right)
     \endyacas

(Note that whenever a cell is updated, any old output is discarded and
replaced with new output.)  The command `C-c C-v a' will update all of
the cells in your document, stopping at each one to ask if you indeed
want it updated.  Given an argument, `C-u C-c C-v a', it will update
all of the cells in your document without asking.  The command `C-c C-v
A' behaves similarly, except now all the output is returned in LaTeX
form.

   ---------- Footnotes ----------

   (1) The prefix `C-c C-v' will be used to update cells in different
ways.


File: yacas-notebook.info,  Node: Initialization Cells,  Next: Referencing Other Cells,  Prev: Evaluating cells,  Up: Top

Initialization Cells
********************

It is possible that you want certain cells evaluated separate from the
others; perhaps, for example, you want certain cells evaluated whenever
you open the document.  This can be done using initialization cells.
An initialization cell is delimited by
     \yacas[* Initialization Cell *]

and
     \endyacas

The command `C-c C-q' will turn a cell into an initialization cell,
applying `C-c C-q' again will turn it back into a regular cell.

   Initialization cells behave like regular cells, except that they can
be treated as a group.  To evaluate all initialization cells (without
displaying the output in the document buffer), the command `C-c C-v q'
will go to each of the initialization cells and evaluate them.  If you
want the output of the initialization cells to be brought back to the
document buffer,  stopping at each one to see it you indeed want it
updated, then use the command `C-c C-v i'.  With an argument, `C-u C-c
C-v i', the initialization cells will be updated without asking.   The
command `C-c C-v I' behaves just like `C-c C-v i', except that the
output is returned in TeX form.


File: yacas-notebook.info,  Node: Referencing Other Cells,  Next: WEB,  Prev: Initialization Cells,  Up: Top

Referencing Other Cells
***********************

Instead of _Yacas_ code, a cell can contain a reference to another cell,
and when the original cell is sent to _Yacas_, the reference is replaced
by the referenced cell's contents (but only in the _Yacas_ process
buffer, the cell's content in the document's buffer is not changed).
In order to do this, the original cell must be marked by having a label
of the form `<'FILENAME`:'CELL LABEL`>'.  (The reason for the FILENAME
will become apparent later, and CELL LABEL is optional for the
referencing cell.)  The referenced cell must also be labeled, with the
same FILENAME but a unique CELL LABEL.  To reference the other cell,
the original cell need only contain the marker for the referenced cell.
For example, given cell 1:
     \yacas<filename:optional>
     <filename:definef>
     D(x)f(x);
     \endyacas

and cell 2:
     \yacas<filename:definef>
     f(x):=Sin(x^2);
     \endyacas

then the result of updating cell 1 (`C-c C-v c') will be:
     \yacas<filename:optional>
     <filename:definef>
     D(x)f(x);
     \output
                /  2 \
     2 * x * Cos\ x  /
     \endyacas

When TeXed, the top line will contain a copy of the marker.

   A cell can contain more than one reference, and referenced cells can
themselves contain references.

   To aid in labelling the cells, the command `C-c C-x' will prompt for
a label name and label the cell.  To aid in calling references, the
command `C-c C-<TAB>' can be used for completing the the FILENAME and
CELL LABEL parts of a reference, based on the current labels.  Another
option is to set the Emacs variable `ynb-abbreviations-allowed' to `t',
say, by putting the line
     (setq ynb-abbreviations-allowed t)

in your `.emacs' file.  This will allow the FILENAME and CELL LABEL
parts of a reference to be abbreviated by enough of a prefix to
uniquely identify it, followed by ellipses `...' For example, if there
are cells labelled
     <filename:long description>
     <filename:lengthy description>

Then the reference
     <...:le...>

will suffice to refer to the second label above.

   If you want the references in a cell to be replaced by the actual
code, the command `C-c @' will expand all the references and put the
code into a separate buffer (so it will not affect the original
document).


File: yacas-notebook.info,  Node: WEB,  Next: Miscellaneous,  Prev: Referencing Other Cells,  Up: Top

WEB
***

The reason for the ability to reference other cells is so that you can
write what Donald Knuth calls literate programs.  The idea is that the
program is written in a form natural to the author rather than natural
to the computer.  (Another aspect of Knuth's system is that the code is
carefully documented, hence the name "literate programming", but that
is done naturally in `Yacas-Notebook'.)  Knuth called his original
literate programming tool `WEB', since, as he puts it, "the structure
of a software program may be thought of as a web that is made up of
many interconnected pieces."  To create a program, the "base cell" or
"package cell" should contain a label of the form `<'FILENAME`:>' (no
cell label), and can contain references of the form
`<'FILENAME`:'PART`>' (same file name as the base cell).

   As a simple (and rather silly) example, suppose we want to create a
program to sum the first n squares.  We could start:
     \yacas<squaresum:>
     SumOfSquares(n) :=
     [
        Local(L);
        <squaresum:makelist>
        <squaresum:squarelist>
        <squaresum:addlist>
     ]; /* SumOfSquares(n) */
     \endyacas

We would then need cells:
     \yacas<squaresum:makelist>
     L:= 1 .. n;
     \endyacas

     \yacas<squaresum:squarelist>
     <squaresum:definesquare>
     L:= MapSingle("square", L);
     \endyacas

     \yacas<squaresum:addlist>
     Sum(L);
     \endyacas

and then also
     \yacas<squaresum:definesquare>
     square(x) := x^2;
     \endyacas

When TeXed, the header of the cell will say that it determines the file
`squaresum'.

   The command `C-u C-c @' will put all the pieces together in the file
it determines.  The resulting file, in this case, will be `squaresum'
and will look contain:
     SumOfSquares(n) :=
     [
        Local(L);
        L:= 1 .. n;
        square(x) := x^2;
        L:= MapSingle("square", L);
        Sum(L);
     ]; /* SumOfSquares(n) */

(Although the idea is that only the computer need look at this file.)


File: yacas-notebook.info,  Node: Miscellaneous,  Next: Installation,  Prev: WEB,  Up: Top

Miscellaneous
*************

Some _Yacas_ commands can be used even outside of cells.  The command
`C-c C-v l' send the current line to a _Yacas_ process, comment out the
current line, and insert the _Yacas_ output in the current buffer.  The
command `C-c C-v L' will do the same, but return the result in TeX form.

   `C-c ?' will bring up the info file for `Yacas-Notebook'

   Some commands from `yacas-mode' will be available in
`yacas-notebook-mode' even outside of cells.  It is possible that you
want to evaluate part of your document that isn't a cell, whether it be
a portion of a cell or not in a cell.  The command `M-C-r' will send
the current region to the _Yacas_ buffer.  This will usually only be
useful when the _Yacas_ buffer is visible.  The command `C-c C-h' will
provide information on a prompted for function.


File: yacas-notebook.info,  Node: Installation,  Next: Customization,  Prev: Miscellaneous,  Up: Top

Installation
************

The `Yacas-Notebook' package consists of the files `yacas.el',
`yacas-notebook.el', `yacas-notebook.sty' and `yacas-notebook.info'.
To install, place `yacas-notebook.el' and `yacas.el' somewhere in the
load path for Emacs. Put `yacas-notebook.info' in the info directory
(this usually `/usr/info/') or set the variable `ynb-info-dir' to the
directory where you put the file, including the trailing `/'.  Finally,
if you want to run LaTeX on the resulting document, put
`yacas-notebook.sty' somewhere in the TeX inputs path.

   To make sure that `yacas-notebook.el' is loaded when necessary, the
line
     (autoload 'yacas-notebook-mode "yacas-notebook" "Yacas-Notebook" t)

can be inserted into your `.emacs' file.  Then typing `M-x
yacas-notebook-mode' will start `Yacas-Notebook' mode.  The command
`M-x ynb-mark-file-as-yacas-notebook' will put the line
     %-*-Yacas-Notebook-*-

at the beginning of the file, if it isn't there already, and will ensure
that the next time the file is opened, it will be in
`yacas-notebook-mode'.  This can be done automatically everytime a file
is put in `yacas-notebook-mode' by putting the line
     (add-hook 'yacas-notebook-mode-hook 'ynb-mark-file-as-yacas-notebook)

somewhere in your `.emacs' file.

   The variable `yacas-documentation-directory' is where
`Yacas-Notebook' expects to find the _Yacas_ documentation, by default
it is `"/usr/share/yacas/documentation."'.


File: yacas-notebook.info,  Node: Customization,  Next: Yacas mode,  Prev: Installation,  Up: Top

Customizing Yacas-Notebook
**************************

There are a few (very few) things that you can do to customize
`Yacas-Notebook'.

   By default, `Yacas-Notebook' is an extension of AUCTeX mode.  This
can be changed by changing the variable `ynb-use-tex'.  The possible
values are `'auctex', `'tex' and `nil'.  Setting `ynb-use-tex' (the
default) to `'auctex' will make `Yacas-Notebook' an extension of
AUCTeX, setting it to `'tex' will make `Yacas-Notebook' an extension of
Emacs's default TeX mode, and setting `ynb-use-tex' to `nil' will make
`Yacas-Notebook' an extension of text-mode.  So, for example, putting
     (setq ynb-use-tex nil)

in your `.emacs' file will make `Yacas-Notebook' default to an
extension of text mode.

   `Yacas-Notebook' will provide menus listing _Cell_ operations,
_Updating_ operations, _Process_ operations, _Control_ constructs,
_Misc_ commands, and _Help_ commands.  Each of these will be a seperate
menu, and there will be a button `Yacas-Notebook>>' on the menu bar
which will restore the standard Emacs menus.   To combine them into a
single menu, labelled _Yacas-Notebook_, set the variable
`ynb-use-menus' to 1.  To change the menus around, change
`ynb-use-menus' to a suitable list, by default, it is set to
     '(yn cell update process control misc help)

   Whether or not the dots (...) abbreviation is allowed in cell
references is controlled by the elisp variable
`ynb-abbreviations-allowed', which is set to `t' by default.  Setting
this to `nil' will disallow the abbreviations, but will speed up
package assembly.

   The lines that appear around cells when the document is TeXed can be
turned off with the command (in the LaTeX document)
     \yacaslinesfalse

They can be turned back on with the command
     \yacaslinestrue

   The fonts used to display the _Yacas_ input and output in a cell are
by default `cmtt10'.  They can be changed, seperately, by changing the
TeX values of `\yacasinputfont' and `\yacasoutputfont'.

   The spacing in the cells can be controlled by changing the TeX
variables `\yacasinputbaselineskip' (by default 10 pt) and
`\yacasoutputbaselineskip' (by default 14 pt), and similarly, the
amount of space that appears after a cell can be changed by changing the
value of `\postyacasspace' (by default, 1.5 ex).


File: yacas-notebook.info,  Node: Yacas mode,  Next: Running Yacas Interactively,  Prev: Customization,  Up: Top

Yacas mode
**********

This is a mode intended to support program development in _Yacas_ by
inserting control constructs in the buffer, help in formatting the code
(for example, a <RET> will start a new line indented the correct
amount)(1), and interacting with a _Yacas_ process.  A complete list of
the commands available are in *Note Yacas mode commands::.  This can be
installed (independently of `yacas-notebook-mode') by inserting
`yacas.el' somewhere in the load path for Emacs, and
`yacas-notebook.info' in the info directory (this is usually
`/usr/info/', alternatively, the variable `yacas-info-dir' can be set
the the directory containing `yacas-notebook.info'.  `yacas-info-dir'
must contain the ending `/'.)  To make sure that `yacas.el' is loaded
when necessary, put the line
     (autoload 'yacas-mode "yacas" "Yacas mode" t)

in your `.emacs' file.

   Most control constructs of _Yacas_ can be reached by typing `C-c
C-'FIRST CHARACTER OF THE CONSTRUCT.  For example, a *for* loop can be
entered with the command `C-c C-f'.  Information, such as the start,
predicate and increment, will be prompted for.  A procedure can be
entered with the command `C-c C-p'.  Local variables will be prompted
for, additional local variables can later be added with `C-c C-l'.

   To get help with _Yacas_, `C-c C-h' will give help on a specific `'
topic(2).  `C-c ?' will bring up the info file for _Yacas_.(3)

   To help in moving around, the commands `C-c <' and `C-c >' move
backward and forward respectively to the next line having the same (or
lesser) level of indentation.

   Since commenting is important, `yacas-mode' has various aids.  The
command `C-c \' will comment out a given region, and `C-c /' will
remove the comments from a region.  To add an inline comment, `C-c C-#'
will prompt for a one line comment to insert.  To add a lengthy comment,
the command `C-c C-*' will add the necessary begin- and end-comment
markers, and place the point between them with an addition level of
indentation.

   The command `C-c C-t' will insert some useful title information at
the beginning of the file, and the command `C-c C-m' will change the
modification date.

   To interact with _Yacas_, the command `M-C-r' will send the current
region to a _Yacas_ process.  `M-C-b' will do the same to the whole
buffer, and `M-C-l' just does the current line.  The _Yacas_ process
can be killed with the command `M-C-k', and it can be restarted with
`M-C-p'.  In the _Yacas_ subshell buffer (see *Note Running Yacas
Interactively::) `C-n' and `C-p' will behave as usual, and `C-<DOWN>'
and `C-<UP>' can also be used to move to the next and previous lines.
<UP> and <DOWN> will scroll through the previous commands (although
these only work for commands which have been entered directly into the
process buffer).

   `yacas-mode' will provide menus listing _Contol_ constructs,
_Process_ operations, _Formatting_ commands, _Motion_ commands, _Misc_
commands, and _Help_ commands.  Each of these will be a seperate menu,
and there will be a button `Yacas>>' on the menu bar which will restore
the standard Emacs menus.   To combine them into a single menu,
labelled _Yacas_, set the variable `yacas-use-menus' to 1.  To change
the menus around, change `yacas-use-menus' to a suitable list, by
default, it is set to
     '(ycs control process formatting motion misc help)

   The variable `yacas-documentation-directory' is where
`Yacas-Notebook' expects to find the _Yacas_ documentation, by default
it is `"/usr/share/yacas/documentation."'.

   ---------- Footnotes ----------

   (1) The variable `yacas-indent' controls the number of spaces for
each indentation, by default it is 4.

   (2) This uses Emacs-W3, and is a bit slow.

   (3) This currently doesn't work with XEmacs.


File: yacas-notebook.info,  Node: Running Yacas Interactively,  Next: Yacas-Notebook mode commands,  Prev: Yacas mode,  Up: Top

Running _Yacas_ Interactively
*****************************

`yacas.el' will allow _Yacas_ to be run interactively within Emacs in a
shell buffer.  To make sure that `yacas.el' is loaded when necessary,
put the line
     (autoload 'yacas "yacas" "Running Yacas" t)

in your `.emacs' file.  Then the command `M-x yacas' will open a buffer
running a _Yacas_ process.  In this _Yacas_ buffer, `C-n' and `C-p'
will behave as usual, and `C-<DOWN>' and `C-<UP>' can also be used to
move to the next and previous lines.  <UP> and <DOWN> will move
backward and forward respectively to the previous or next command in
the buffer (although these only work for commands which have been
entered directly into the buffer, as opposed to, say, from
`yacas-mode').

   The _Yacas_ buffer will have menus for many _Yacas_ functions.  There
will be _Arithmetic_, _Functions_, _Linear Algebra_, _Calculus_,
_Simplifying_, _Solving_, _Polynomial_, _Lists_, _Configuration_,
_Programming_, _Others_, and _Help_ menus.  (These titles will be
abbreviated.)If a function is inserted using the menus, the list of
arguments required by the function will appear in the minibuffer. (In
some cases, some arguments are prompted for.)  There will be a button
`Yacas>>' on the menu bar can be used to quit the _Yacas_ process or
restore the standard Emacs menus.   To combine these menus into a
single menu, labelled _Yacas_, set the variable `yacas-shell-use-menus'
to 1.  To change the menus around, change `yacas-shell-use-menus' to a
suitable list, by default, it is set to
     '(yacas arithmetic functions linalg calculus simplify solve poly lists
     config progm others help)

   In the _Yacas_ shell buffer, the following commands will also be
available.
`M-C-k'     `yacas-kill-process'             Kill the current _Yacas_
                                             process (and the buffer)
`C-c ='     `yacas-recenter-output-buffer'   Center the _Yacas_ shell buffer
`C-c C-h'   `yacas-help'                     Get help on a specific _Yacas_
                                             topic


File: yacas-notebook.info,  Node: Yacas-Notebook mode commands,  Next: Yacas mode commands,  Prev: Running Yacas Interactively,  Up: Top

Yacas-Notebook mode commands
****************************

*Key*       *Command*                        *Description*
`C-c ?'     `ynb-info-help'                  Bring up the info file for
                                             `Yacas-Notebook'
`C-c +'     `ynb-forward-cell'               Go the the next cell.
`C-c -'     `ynb-previous-cell'              Go to the previous cell.
`C-c C-y'   `ynb-show-yacas-buffer'          Display the _Yacas_ buffer.
`C-u C-c    `ynb-dont-show-yacas-buffer'     Hide the _Yacas_ buffer.
C-y'                                         
`C-c C-v a' `ynb-update-all'                 Update all of the cells.  With
                                             an argument, don't ask before
                                             updating.
`C-c C-v A' `ynb-tex-update-all'             Update all of the cells in TeX
                                             form. With an argument don't ask
                                             before updating.
`C-c C-v q' `ynb-eval-init'                  Evaluate all of the
                                             initialization cells.
`C-c C-v i' `ynb-update-init'                Update all of the
                                             initialization cells.  With an
                                             argument, don't ask before
                                             updating.
`C-c C-v I' `ynb-tex-update-init'            Update all of the
                                             initialization cells in TeX
                                             form.  With an argument, don't
                                             ask before updating.

*Commands only available in cells.*
*Key*       *Command*                        *Description*
`C-c C-s'   `ynb-send-cell'                  Send the current cell to the
                                             _Yacas_ process.
`C-c C-v c' `ynb-update-cell'                Update the current cell.
`C-c C-v C' `ynb-tex-update-cell'            Update the current cell in TeX
                                             form.
`C-c C-d'   `ynb-delete-output'              Delete the output from the
                                             current cell.
`C-c C-q'   `ynb-toggle-init'                Toggle whether or not the
                                             current cell is an
                                             initialization cell.
`C-c C-g'   `ynb-put-outputgraphics'         Insert a graphics environment
                                             for the output.
`C-c C-x'   `ynb-package-part'               Insert a heading for the cell
                                             indicating that it's part of a
                                             package.
`C-c @'     `ynb-assemble'                   Assemble the references
                                             contained in the cell.  With an
                                             argument, assemble the package
                                             that the cell defines.
`C-c        `ynb-insert-complete-name'       Complete a reference within a
C-<TAB>'                                     cell.

*Commands only available outside of cells.*
*Key*       *Command*                        *Description*
`C-c C-o'   `ynb-create-cell'                Create a cell.
`C-c C-v l' `ynb-replace-line'               Send the current line to
                                             _Yacas_, and replace the line
                                             with the _Yacas_ output.
`C-c C-v L' `ynb-replace-line-with-tex'      Send the current line to
                                             _Yacas_, and replace the line
                                             with the _Yacas_ output in TeX
                                             form.


File: yacas-notebook.info,  Node: Yacas mode commands,  Next: AUCTeX commands,  Prev: Yacas-Notebook mode commands,  Up: Top

Yacas mode commands
*******************

*Control constructs*
*Key*       *Command*                        *Description*
`C-c C-p'   `yacas-proc'                     Insert a _Yacas_ procedure.
`C-c C-l'   `yacas-local'                    Insert additional local
                                             variables into a procedure.
`C-c C-f'   `yacas-for'                      Insert a *for* loop.
`C-c C-a'   `yacas-foreach'                  Insert a *foreach* loop.
`C-c C-i'   `yacas-if'                       Insert an *if* statement.
`C-c C-e'   `yacas-else'                     Insert an *else*
`C-c C-w'   `yacas-while'                    Insert a *while* statement.
`C-c C-u'   `yacas-until'                    Insert an *until* statement.
`C-c C-n'   `yacas-function'                 Insert a function environment.

*Commenting*
*Key*       *Command*                        *Description*
`C-c \'     `comment-region'                 Comment out the region.
`C-c /'     `yacas-uncomment-region'         Remove the comments about a
                                             region.
`C-c #'     `yacas-short-comment'            Prompt for, and insert, a short
                                             comment.
`C-c *'     `yacas-long-comment'             Insert a comment environment.
`C-c C-t'   `yacas-title'                    Insert title information at the
                                             beginning of the buffer.  With
                                             an argument, return to the
                                             previous position.
`C-c C-m'   `yacas-modify'                   Change the modification time in
                                             the title information.

*Formatting commands*
*Key*       *Command*                        *Description*
`M-<TAB>'   `yacas-indent-line'              Indent the current line an
                                             appropriate amount.
`C-c ]'     `yacas-indent-region'            Rigidly indent a region.
`<TAB>'     `yacas-tab'                      Add another level of
                                             indentation to the line.
`<DEL>'     `yacas-untab'                    Remove a level of indentation
                                             from the line.
`<RET>'     `yacas-newline'                  Start a new line at the
                                             appropriate level of
                                             indentation.

*Interacting with _Yacas_*
*Key*       *Command*                        *Description*
`M-C-r'     `yacas-region'                   Send the region to the _Yacas_
                                             process.
`M-C-b'     `yacas-buffer'                   Send the buffer to the _Yacas_
                                             process.
`M-C-l'     `yacas-line'                     Send the current line to the
                                             _Yacas_ process.
`M-C-p'     `yacas-start-process'            Start a _Yacas_ process.
`M-C-q'     `yacas-reset'                    Reset the _Yacas_ process.
`M-C-k'     `yacas-kill-job'                 Kill the _Yacas_ process.
`M-C-s'     `yacas-eval-string'              Prompt for a string to send to
                                             the _Yacas_ process.
`C-c ='     `yacas-recenter-output-buffer'   Recenter the output buffer.

*Motion*
*Key*       *Command*                        *Description*
`C-c >'     `yacas-forward-to-same-indent'   Move forward to the next line
                                             having the same or lesser level
                                             of indentation.
`C-c <'     `yacas-backward-to-same-indent'  Move backward to the previous
                                             line having the same or lesser
                                             level of indentation.

*_Yacas_ help*
*Key*       *Command*                        *Description*
`C-c C-h'   `yacas-help'                     Get help on a (prompted for)
                                             subject.
`C-c ?'     `yacas-info-help'                Bring up the info file for
                                             _Yacas_


File: yacas-notebook.info,  Node: AUCTeX commands,  Prev: Yacas mode commands,  Up: Top

AUCTeX commands
***************

*Inserting commands*
`C-c C-e'              Insert an environment.
`C-c C-s'              Insert a section.
`C-c ]'                Close an environment.
`C-c <RET>'            Insert an item into a list.
`"'                    Smart quote.
`$'                    Smart dollar sign.
`C-c }'                Insert double brace.
`C-c C-m'              Insert TeX macro.
`M-<TAB>'              Complete TeX macro.

*Formatting*
`C-c C-q C-r'          Format region.
`C-c C-q C-s'          Format section.
`C-c C-q C-e'          Format environment.
`C-c .'                Mark an environment.
`C-c *'                Mark a section.

*Commenting*
`C-c ;'                Comment a region.
`C-u C-c ;'            Uncomment a region.
`C-c %'                Comment a paragraph.
`C-u C-c %'            Uncomment a paragraph.

*Font selection*
`C-c C-f C-b'          Bold.
`C-c C-f C-i'          Italics.
`C-c C-f C-r'          Roman.
`C-c C-f C-e'          Emphasized.
`C-c C-f C-t'          Typewriter.
`C-c C-f C-s'          Slanted.
`C-c C-f C-d'          Delete font.
`C-u C-c C-f'          Change font.

*Running TeX*

(Commands: `TeX', `TeX Interactive', `LaTeX', `LaTeX Interactive',
`SliTeX', `View', `Print', `BibTeX', `Index', `Check', `File', `Spell'.)
`C-c C-c'              Run a command on the master file.
`C-c C-r'              Run a command on the current region.
`C-c C-b'              Run a command on the buffer.
`C-c `'                Go to the next error.
`C-c C-k'              Kill the TeX process.
`C-c C-l'              Center the output buffer.
`C-c C-^'              Switch to the master file.
`C-c C-w'              Toggle debug of overful boxes.



Tag Table:
Node: Top1015
Node: Introduction1554
Ref: Introduction-Footnote-12271
Ref: Introduction-Footnote-22389
Node: Cells2513
Ref: Cells-Footnote-13238
Node: Evaluating cells3437
Ref: Evaluating cells-Footnote-15853
Node: Initialization Cells5930
Node: Referencing Other Cells7204
Node: WEB9637
Node: Miscellaneous11745
Node: Installation12673
Node: Customization14222
Node: Yacas mode16624
Ref: Yacas mode-Footnote-120318
Ref: Yacas mode-Footnote-220426
Ref: Yacas mode-Footnote-320473
Node: Running Yacas Interactively20522
Node: Yacas-Notebook mode commands22731
Node: Yacas mode commands26717
Node: AUCTeX commands31074

End Tag Table
