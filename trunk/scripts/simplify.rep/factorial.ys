
/* FactorialSimplify algorithm: 
   1) expand binomials into factors
   2) expand brackets as much as possible
   3) for the remaining rational expressions x/y,
      take all the factors of x and y, and match them
      up one by one to determine if they can be 
      factored out. The algorithm will look at expressions like x^n/x^m
      where (n-m) is an integer, or at expressions x!/y! where (x-y)
      is an integer. The routine CommonDivisors does these steps, and
      returns the new numerator and denominator factor.
  FactorialSimplifyWorker does the actual O(n^2) algorithm of
  matching all terms up.
*/

FactorialSimplify(x):=
[
  // Substitute binomials
  x:=(x/:{Bin(_n,_m)<- (n!)/((k!)*(n-k)!)});
  // Expand expression as much as possible so that the terms become
  // simple rationals.

  x:=(
      x/::Hold({
          (_a/_b)/_c <- (a*c)/b,
          _a*(_b+_c) <- a*b+a*c,
          (_b+_c)*_a <- a*b+a*c,
          (_b+_c)/_a <- b/a+c/a,
          _a*(_b-_c) <- a*b-a*c,
          (_b-_c)*_a <- a*b-a*c,
          (_b-_c)/_a <- b/a-c/a
     }));

  FactorialSimplifyWorker(x);
];


10 # CommonDivisors(_x^(_n),_x^(_m))_IsInteger(Simplify(n-m)) 
   <--
   {x^Simplify(n-m),1};


10 # CommonDivisors((_x)!, (_y)!)_IsInteger(Simplify(x-y)) 
   <--
   [
     Local(dist,result);
     Set(dist,Simplify(x-y));
     result:=CommonFact(dist,y);
     result;
   ];

10 # CommonFact(dist_IsNegativeInteger,_y) 
   <-- {1,Factorize(i,1,-dist,Simplify(y+i+dist))};
11 # CommonFact(_dist,_y) 
   <-- {Factorize(i,1,dist,Simplify(y+i)),1};

60000 # CommonDivisors(_x,_y) <-- {x,y};

10 # FactorialSimplifyWorker(_x+_y) <-- FactorialSimplifyWorker(x)+FactorialSimplifyWorker(y);
10 # FactorialSimplifyWorker(_x-_y) <-- FactorialSimplifyWorker(x)-FactorialSimplifyWorker(y);
10 # FactorialSimplifyWorker(  -_y) <--                     -FactorialSimplifyWorker(y);

LocalSymbols(x,y,i,j,n,d)[

20 # FactorialSimplifyWorker(_x/_y) <-- 
[
  x:=Flatten(x,"*");
  y:=Flatten(y,"*");

  Local(i,j);
  For(i:=1,i<=Length(x),i++)
  For(j:=1,j<=Length(y),j++)
  [
    Local(n,d);
    {n,d} := CommonDivisors(x[i],y[j]);
    x[i] := n;
    y[j] := d;
  ];
  Factorize(x)/Factorize(y);
];

];

60000 # FactorialSimplifyWorker(_x) <-- x;

