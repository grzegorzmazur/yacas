//////////////////////////////////////////////////
/// Backends for 2D plotting
//////////////////////////////////////////////////

/// List of all defined backends and their symbolic labels.
/// Add any new backends here 
Plot2D'outputs() := {
	{"default", "gnuplot"},
	{"data", "Plot2D'data"},
	{"datafile", "Plot2D'datafile"},
	{"gnuplot", "Plot2D'gnuplot"},
	{"plotutils", "Plot2D'plotutils"},
	{"gmt", "Plot2D'gmt"},
};

/*
	How backends work:
	Plot2D'<backend>(values, options'hash)
	options'hash is a hash that contains all plotting options:
	["xrange"] - a list of {x1, x2}, ["xname"] - name of the variable to plot, ["yname"] - array of string representations of the function(s), and perhaps other options relevant to the particular backend.
	{values} is a list of lists of pairs of the form {{{x1, y1}, {x2, y2}, ...}, {{x1, z1}, {x2, z2}, ...}, ...} corresponding to the functions y(x), z(x), ... to be plotted. The abscissa points x[i] are not the same for all functions.
	The backend should prepare the graph of the function(s). The "datafile" backend Plot2D'datafile(values, options'hash) may be used to output all data to file(s), in which case the file name should be given by the value options'hash["filename"]. Multiple files are created with names obtained by appending numbers to the filename.
	Note that the "data" backend does not do anything and simply returns the data.
	The backend Plot2D'datafile takes care not to write "Infinity" or "Undefined" data points (it just ignores them). Custom backends should either use Plot2D'datafile or take care of this themselves.
*/

/// trivial backend: return data list (do not confuse with Plot2D'get'data() defined in the main code which is the middle-level plotting routine)
Plot2D'data(values_IsList, _options'hash) <-- values;

/// backend: display graph using gnuplot
Plot2D'gnuplot(values_IsList, _options'hash) <--
[
  Local(item, dirBase, filename'list, control'file);
  dirBase := make'plotting'dir(options'hash);
  // write all data to file(s) and save the filenames
  filename'list := Plot2D'datafile(values, options'hash);
  // prepare the control file for gnuplot
  control'file := MakeFilePath(dirBase, "gnuplot.in");
  ToFile(control'file)
  [
	// 'set xrange [-5:5]'
    WriteString("set xrange [");
	Write(options'hash["xrange"][1]);
	WriteString(" : ");
	Write(options'hash["xrange"][2]);
	WriteString("]" : Nl());
	// 'set yrange [0:1]'
	If(
		options'hash["yrange"] != Empty,
		[
			WriteString("set yrange [");
			Write(options'hash["yrange"][1]);
			WriteString(" : ");
			Write(options'hash["yrange"][2]);
			WriteString("]" : Nl());
		]
	);
	// 'plot "data1" title "y(x)" with lines, "data2" title "z(x)" with lines'
	WriteString("plot ");
	For(item:=1, item<=Length(values), item++)
	[
		// need to convert the data file name to the Unix format, otherwise Gnuplot doesn't work b/c its Windows version doesn't understand the Windows directory separator "\"
		WriteString("\"" : ConvertOSPath(filename'list[item], "Unix")
		  : "\" smooth csplines title \"" : options'hash["yname"][item]
		  : "\" with lines");
		// add a comma if necessary
		If(item<Length(values), WriteString(", "));
	];
	WriteString(Nl());
	// special handling for Win32 platforms
	WriteString(GnuplotExtraCmd());
  ];
  // again special handling for different platforms
  SystemCall(GnuplotCmd(control'file));
];

/// backend: use "graph" from GNU plotutils
Plot2D'plotutils(values_IsList, _options'hash) <--
[
  Local(item, dirBase, filename, filename'list);
  dirBase := make'plotting'dir(options'hash);
  // write all data to file(s) and save the filenames
  filename'list := Plot2D'datafile(values, options'hash);
  // build command line
  SystemCall(
  	"graph -T X --bitmap-size 640x480 -m 1 -C -h 0.54 -w 0.72 -r 0.15 -u 0.1"
    : " --x-limits " : (ToString()Write(options'hash["xrange"][1], options'hash["xrange"][2]))
    : If(
		options'hash["yrange"] != Empty,
		" --y-limits " : (ToString()Write(options'hash["yrange"][1], options'hash["yrange"][2]))
	)
    : " -X " : (ToString()Write(options'hash["xname"]))
	: " -Y \"" : PrintList(options'hash["yname"]) : "\" "
	: PrintList(filename'list, " ")
  );
];

/// backend: write data into file.
/// Filename must be specified in options as options'hash["filename"].
/// Returns the list of created filenames
/// This backend is used by other backends to write data to files.
Plot2D'datafile(values_IsList, _options'hash) <--
[
	Local(item, func, filename, filename'list);
	filename'list := {};
	For(func:=1, func<=Length(values), func++)
	[
		filename := options'hash["filename"]:String(func);
		DestructiveAppend(filename'list, filename);
		ToFile(filename) ForEach(item, values[func]) WriteDataItem(item, options'hash);
		If(Verbose, Echo( "Plot2D'datafile: created file '" : filename :  "'"), True);
	];
	filename'list;
];

/// backend: use GMT and the script yacas-gmtplot2d.sh
Plot2D'gmt(values_IsList, _options'hash) <--
[
  Local(dirBase, filename'list, script'file, ps'file);
  Use("addons/unix.ys");	// need PSViewCommand
  dirBase := make'plotting'dir(options'hash);
  // use a special shell script file for plotting
  script'file := FindFile("yacas-gmtplot2d.sh");
  Check(script'file!="", "Missing file yacas-gmtplot3d.sh");
  // write postscript to this file
  ps'file := MakeFilePath(dirBase, "gmt-out.ps");
  // write all data to file(s) and save the filenames
  filename'list := Plot2D'datafile(values, options'hash);
  SystemCall("sh " : script'file : " -o " : ps'file
    : If(options'hash["yrange"] != Empty, " -yrange "
	  : ToString()Write(options'hash["yrange"][1], options'hash["yrange"][2])
	  , "")
    : " " : PrintList(filename'list, " ") );
  Echo("Displaying PS file");
  SystemCall(PSViewCommand : " " : ps'file : " &");

];

