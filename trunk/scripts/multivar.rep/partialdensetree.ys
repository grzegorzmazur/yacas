

LocalSymbols(PartialDenseTreeMap2,PartialDenseTreeScan2,Muaddterm,MuMuaddterm,
              meradd,meraddmap,NormalMonomial) [

10 # CreatePartialDenseTree({},_fact) <-- fact;

20 # CreatePartialDenseTree(_coefs,_fact) 
    <-- CreatePartialDenseTree(Head(coefs),Tail(coefs),fact);
10 # CreatePartialDenseTree(_first,{},_fact) <-- {first,{fact}};
20 # CreatePartialDenseTree(_first,_coefs,_fact)
    <-- {first,{CreatePartialDenseTree(Head(coefs),Tail(coefs),fact)}};

10 # PartialDenseTreeMap(_op,_depth,_list) <-- PartialDenseTreeMap2(list,depth,{});
10 # PartialDenseTreeMap2({_first,_list},1,_coefs)  
   <-- 
   [
   Local(i);
   For(i:=1,i<=Length(list),i++)
   [
     list[i] := ApplyPure(op,{Concat(coefs,{first+i-1}),list[i]});
   ];
   ];
20 # PartialDenseTreeMap2({_first,_list},_depth,_coefs) 
   <--
   ForEach(item,list)
   [
     PartialDenseTreeMap2(item,MathAdd(depth,-1),Concat(coefs,{first}));
     Set(first,MathAdd(first,1));
   ];
UnFence("PartialDenseTreeMap", 3);
[Local(fn);fn:=String(PartialDenseTreeMap2);`UnFence(@fn,3);];

10 # PartialDenseTreeScan(_op,_depth,_list) <-- PartialDenseTreeScan2(list,depth,{});
10 # PartialDenseTreeScan2({_first,_list},1,_coefs)
   <--
   [
   Local(i);
   For(i:=1,i<=Length(list),i++)
   [
     ApplyPure(op,{Concat(coefs,{first+i-1}),list[i]});
   ];
   ];
20 # PartialDenseTreeScan2({_first,_list},_depth,_coefs) 
   <--
   ForEach(item,list)
   [
     PartialDenseTreeScan2(item,MathAdd(depth,-1),Concat(coefs,{first}));
     Set(first,MathAdd(first,1));
   ];
UnFence("PartialDenseTreeScan", 3);
[Local(fn);fn:=String(PartialDenseTreeScan2);`UnFence(@fn,3);];

AddPartialDenseTrees(_depth,_x,_y)
    <-- MultiplyAddPartialDenseTrees(depth,x,y,FillList(0,depth),1);


10 # MultiplyAddPartialDenseTrees(_depth,_x,_y,_coefs,_fact) <--
[
  Local(first1,list1,max1);
  Local(first2,list2,max2);
  Local(first,last,result,i,index,item,nr);
  Set(first1,x[1]);
  Set(first2,y[1]+coefs[1]);
  Set(list1,x[2]);
  Set(list2,y[2]);
  Set(first,Min(first1,first2));
  Set(max1,first1+Length(list1));
  Set(max2,first2+Length(list2));
  Set(last,Max(max1,max2));
  Set(index,CreatePartialDenseTree(Tail(coefs),0));
  Set(result,FillList(index,last-first));
//  Set(result,ArrayCreate(last-first,index));
  Set(nr,Length(list1));
  Set(index,first1-first);
  For(i:=1,i<=nr,i++)
  [
    Set(index,MathAdd(index,1));
    result[index] := list1[i];
  ];
  Set(nr,Length(list2));
  if(depth=1)
  [
    Set(index,first2-first);
    For(i:=1,i<=nr,i++)
    [
      Set(index,MathAdd(index,1));
      result[index] := result[index] + fact*list2[i];
    ];
  ]
  else
  [
    Set(index,first2-first);
    For(i:=1,i<=Length(list2),i++)
    [
      Set(index,MathAdd(index,1));
      result[index] := MultiplyAddPartialDenseTrees(depth-1,
          result[index],list2[i],Tail(coefs),fact);
    ];
  ];
  {first,result};
];
/*TODO remove?
10 # MultiplyAddPartialDenseTrees(_depth,_x,_y,_coefs,_fact) <--
[
  Local(first1,list1,max1);
  Local(first2,list2,max2);
  Local(first,last,result,i,index,item);
  Set(first1,x[1]);
  Set(first2,y[1]+coefs[1]);
  Set(list1,x[2]);
  Set(list2,y[2]);
  Set(first,Min(first1,first2));
  Set(max1,first1+Length(list1));
  Set(max2,first2+Length(list2));
  Set(last,Max(max1,max2));
//Echo({"enter",fact,first1,list1,first2,list2});

  Set(result,FillList(0,last-first));
  For(i:=1,i<=last-first,i++)
  [
    Set(index,first+i-1);
    if (index>=first1 And index<max1)
    [
      if (index>=first2 And index<max2)
      [
        if (depth=1)
        [
          result[i] := list1[1+index-first1] + fact*list2[1+index-first2];
//Echo({index,list1[1+index-first1]," + ", fact," * ",list2[1+index-first2]," = ",result[i]});
        ]
        else
        [
          result[i] := MultiplyAddPartialDenseTrees(depth-1,
            list1[1+index-first1],list2[1+index-first2],Tail(coefs),fact);
        ];
      ]
      else
      [
        Local(f,li);
        Set(f,fact);
        Set(fact,1);
        Set(li,FillList(0,Length(coefs)-1)); //Tail(coefs)
        result[i] := meradd(list1[1+index-first1],li);
        Set(fact,f);
      ];
    ]
    else
    [
      if (index>=first2 And index<max2)
      [
        result[i] := meradd(list2[1+index-first2],Tail(coefs));
//Echo({index, fact," * ",list2[1+index-first2]," = ",result[i]});
      ]
      else
      [
//Echo({"DENSE ",coefs,CreatePartialDenseTree(Tail(coefs),0)});
        result[i] := CreatePartialDenseTree(Tail(coefs),0);
      ];
    ];
  ];
//  x[1] := first;
// x[2] := result;
//  x;
//Echo({"leave",result});
  {first,result};
];
*/

/*TODO remove
meraddu(_a,_b) <--
[
  Local(res);
  Echo({"IN ",a,b});
  res:=meradd(a,b);
  Echo({"OUT ",res});
  res;
];
UnFence("meraddu",2);
 */
10 # meradd({_ord,_rest},_coefs)_(Length(coefs)>0) <-- 
[
  Local(head);
  Set(head,Head(coefs));
  Set(coefs,Tail(coefs));
  {ord+head,meraddmap(rest,coefs)};
];
20 # meradd(_rest,_coefs) <-- 
[
   rest*fact;
];

10 # meraddmap(list_IsList,_coefs) <-- 
[
  Local(result);
  Set(result,{});
  ForEach(item,list)
  [
    DestructiveAppend(result,meradd(item,coefs));
  ];
  result;
];

[Local(fn);fn:=String(meradd);`UnFence(@fn,2);];
[Local(fn);fn:=String(meraddmap);`UnFence(@fn,2);];

/*
*/

]; // LocalSymbols
