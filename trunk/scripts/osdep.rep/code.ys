// OS-dependent code (to be replaced or configured at build time)

// this lists the available OS-specific modules
SupportedOSes :=
{
	{"Unix", "unix.ys"}, // Unix defaults will probably work on MacOSX and BeOS
	{"Win32", "win32.ys"},
};

// it seems that we need this here because otherwise we won't be able to load the module... or will we?
FilePathSeparators :=
{
	{"Unix", "/"},
	{"Win32", "\\"},
};

// The variable PlatformOS determines which module we should load.
// Try to decide this from Version().
// On Windows, Version() should begin with the letters "Win".
// Otherwise we assume Unix.

PlatformOS := If(StringMid(1,3,Version())="Win", "Win32", "Unix");

FilePathSeparator := FilePathSeparators[PlatformOS];

// this function should be called from yacasinit.ys
LoadOSDependentModule() := Use(
  ConcatStrings(
	"osdep.rep/",
	// FilePathSeparator,
	SupportedOSes[PlatformOS]
  )
);

// definitions of variable-argument functions

Function() MakeFilePath(file, ...);
Function() MakeDir(dir, ...);
Function() DeleteDir(dir, ...);
Function() DeleteFile(file, ...);

CopyFile(file1, file2) := SystemCall(CopyFileCmd(file1, file2));

10 # MakeFilePath(file_IsString) <-- file;
10 # MakeFilePath({file_IsString}) <-- file;
20 # MakeFilePath(files_IsList) <-- ConcatStrings(files[1], FilePathSeparator, MakeFilePath(Tail(files)));

10 # MakeDir(dir_IsString) <-- SystemCall(MakeDirCmd(dir));
10 # MakeDir({dir_IsString}) <-- MakeDir(dir);
20 # MakeDir(dirs_IsList) <-- MakeDir(Head(dirs)) And MakeDir(Tail(dirs));

10 # DeleteDir(dir_IsString) <-- SystemCall(DeleteDirCmd(dir));
10 # DeleteDir({dir_IsString}) <-- DeleteDir(dir);
20 # DeleteDir(dirs_IsList) <-- DeleteDir(Head(dirs)) And DeleteDir(Tail(dirs));

10 # DeleteFile(file_IsString) <-- SystemCall(DeleteFileCmd(file));
10 # DeleteFile({file_IsString}) <-- DeleteFile(file);
20 # DeleteFile(files_IsList) <-- DeleteFile(Head(files)) And DeleteFile(Tail(files));

SystemCallBg(command) := SystemCall(BackgroundCmd(command));
