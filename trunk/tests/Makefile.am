## Makefile.am -- Process this file with automake to produce Makefile.in

# Yacas test suite
# ----------------
# Two tests are supported:
# 1. 'make check' tests the version of yacas in the build tree, by running 'test-built-yacas'
# 2. 'make installcheck' tests the installed version of yacas, by running 'test-installed-yacas'
#
# Both 'test-built-yacas' and 'test-installed-yacas' are generated below.
# They run the scripts in $(TESTFILES) through yacas.
# Special case: the test file "webster.yts" is extracted from the documentation

TESTFILES = openmath.yts macro.yts arithmetic.yts c_tex_form.yts calculus.yts canprove.yts \
	comments.yts complex.yts deriv.yts dimensions.yts dot.yts \
	integrate.yts lists.yts logic_simplify_test.yts matrixpower.yts \
	nthroot.yts outer.yts predicates.yts ode.yts \
	tensors.yts trace.yts tr.yts multivar.yts numbers.yts io.yts \
	programming.yts regress.yts simplify.yts solve.yts sums.yts \
	transforms.yts radsimp.yts linalg.yts orthopoly.yts poly.yts numerics.yts \
	scopestack.yts plots.yts plugin.yts GaussianIntegers.yts nummethods.yts sturm.yts \
        cyclotomic.yts 

SPECIALTESTFILES = ../manmake/wester-1994.ys

# Script to run for 'check' target
TESTS = test-built-yacas   

# Script to run for 'installcheck' target
INSTALL_TESTS = test-installed-yacas   

# To run the version of yacas in the build tree
BUILT_YACAS = ../src/yacas -pc --rootdir $(top_srcdir)/scripts/:../scripts/ --dlldir ../plugins/example

# To run the installed version of yacas
INSTALLED_YACAS = $(bindir)/yacas -pc   

# File to gather the results of the tests in
TESTRESULT = testresult.txt

## --------------------------------------------------

EXTRA_DIST = test.bat $(TESTFILES)

$(TESTS) $(INSTALL_TESTS): Makefile
	@echo 'Making test script "$@"'
	@echo '#! $(SHELL)' > $@
	@echo >> $@
	@echo '# This file is generated by a script' >> $@
	@echo rm -f $(TESTRESULT) >> $@
	@for file in $(TESTFILES) $(SPECIALTESTFILES); do 				                        \
	   echo echo '$@: Running ' $$file '|' tee -a $(TESTRESULT) >> $@; 		                        \
	   if test -f $$file; then d=.; else d=$(srcdir); fi; 				                        \
	   if test "$@" = $(TESTS); then 						                        \
	      echo \( $(BUILT_YACAS) $$d/$$file                                                                 \
                   '|| echo "****** Exit code $$?" ) | tee -a' $(TESTRESULT) >> $@;                             \
	   else										                        \
	      echo \( $(INSTALLED_YACAS) $$d/$$file                                                             \
                   '|| echo "****** Exit code $$?" ) | tee -a' $(TESTRESULT) >> $@;                             \
	   fi;										                        \
	 done
	@echo echo The output of the test scripts can be found in `pwd`/$(TESTRESULT) >> $@
	@echo 'if grep "\*\*\*\*\*\*\|Error" $(TESTRESULT) > /dev/null; then false; else true; fi' >> $@
	@chmod u+x $@

## Support for 'installcheck' target, used by 'make checkdist'.
## The following is copied straight from generated code for 'check' target.
## Note: it would be nice to eliminated the code duplication.

installcheck-am: $(INSTALL_TESTS)
	@failed=0; all=0; \
	srcdir=$(srcdir); export srcdir; \
	for tst in $(INSTALL_TESTS); do \
	  if test -f $$tst; then dir=.; \
	  else dir="$(srcdir)"; fi; \
	  if $(TESTS_ENVIRONMENT) $$dir/$$tst; then \
	    all=`expr $$all + 1`; \
	    echo "PASS: $$tst"; \
	  elif test $$? -ne 77; then \
	    all=`expr $$all + 1`; \
	    failed=`expr $$failed + 1`; \
	    echo "FAIL: $$tst"; \
	  fi; \
	done; \
	if test "$$failed" -eq 0; then \
	  banner="All $$all tests passed"; \
	else \
	  banner="$$failed of $$all tests failed"; \
	fi; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"; \
	test "$$failed" -eq 0

CLEANFILES = $(TESTS) $(INSTALL_TESTS) $(TESTRESULT)
