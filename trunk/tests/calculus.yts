
Testing("UnaryFunctionInverses");
Verify(Sin(ArcSin(a)),a);
Verify(Cos(ArcCos(a)),a);
//TODO ??? Verify(Tan(ArcTan(a)),a);
Verify(ArcSin(Sin(a)),a);
Verify(ArcCos(Cos(a)),a);
//TODO ??? this is not always the correct answer! Verify(ArcTan(Tan(a)),a);
Verify(Tan(Pi/2),Infinity);
Verify(Tan(Pi),0);
Verify( Limit(x,Infinity) Sin(x), Undefined );
Verify( Limit(x,Infinity) Cos(x), Undefined );
Verify( Limit(x,Infinity) Tan(x), Undefined );
Verify( Limit(x,Infinity) Gamma(x), Infinity );
Verify( Limit(x,Infinity) Abs(x), Infinity );
Verify( Limit(x,Infinity) Factorial(x), Infinity);

Verify( Sin(x)/Cos(x), Tan(x) );
// Jonathan, are you sure you want the expression below to 
// flag as a known failure?
//KnownFailure(Verify( Sin(x)^2 + Cos(x)^2, 1 ));
Verify( TrigSimpCombine(Sin(x)^2 + Cos(x)^2), 1 );
//Verify( Cos(x)/Sin(x), Cot(x) );	// we don't want Cot() to appear
Verify( Sinh(x)-Cosh(x), Exp(-x));
Verify( Sinh(x)+Cosh(x), Exp(x) );
Verify( Sinh(x)/Cosh(x), Tanh(x) );
Verify( Sinh(Infinity), Infinity);
Verify( Sinh(x)*Csch(x), 1);
Verify( 1/Coth(x), Tanh(x) );

/// these two aren't correct: what if n itself is negative or zero?
//KnownFailure(Verify(Exp(-n*Infinity), 0 ));
//KnownFailure(Verify(Exp(n*Infinity), Infinity));



Verify(2+I*3,Complex(2,3));
Verify(Re(2+I*3),2);
Verify(Im(2+I*3),3);
Verify(ZeroVector(3),{0,0,0});
Verify(BaseVector(2,3),{0,1,0});
Verify(Identity(3),{{1,0,0},{0,1,0},{0,0,1}});

Testing("Derivatives");
Verify(D(x) a,0);
Verify(D(x) x,1);
Verify(D(x) x+x,2);
Verify(D(x) x*x,2*x);
Verify(D(x) D(x) Sin(x),-Sin(x));

Testing("Pslq");
Verify(Pslq({ Pi+2*Exp(1) , Pi , Exp(1) },20),{1,-1,-2});
Verify(Pslq({ 2*Pi+3*Exp(1) , Pi , Exp(1) },20),{1,-2,-3});

