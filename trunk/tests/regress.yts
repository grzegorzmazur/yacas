

NextTest("Regression on bug reports");

Verify(N(Sin(a)),Sin(a));
LogicVerify(CanProve(P Or (Not P And Not Q)),P Or Not Q);
Verify(Cos(0),1);
Verify(Infinity/Infinity,Undefined);
Verify(Sqrt(Infinity),Infinity);
Verify(1^Infinity,Undefined);
Verify((-2)*Infinity,-Infinity);
Verify(Infinity*0,Undefined);
Verify(Limit(x,Infinity) (-x^2+1)/(x+2),-Infinity);
Verify(Limit(x,-Infinity)Exp(2*x),0);
Verify(Limit(x,Infinity)(1+1/x)^x,Exp(1));
Verify(Limit(x,Infinity)(1+2/x)^x,Exp(2));
Verify(Limit(x,Infinity)(1+1/x)^(2*x),Exp(2));
Verify(Limit(x,Infinity)-2*x,-Infinity);
Verify(Limit(x,Infinity)(x^2+1)/(-x^3+1),0);

Verify(Limit(x,0)1/x,Undefined);
Verify(Limit(x,0,Right)1/x,Infinity);
Verify(Limit(x,0,Left)1/x,-Infinity);

Verify([Local(a);a:=0.1;Simplify((a*b*c)/(a*c*b));],1);
LogicVerify(CanProve(P Or (Not P And Not Q)),P Or Not Q);
LogicVerify(CanProve(A>0 And A<=0),False);
LogicVerify(CanProve(A>0 Or A<=0),True);
Verify(A<0,A<0);
Verify(A>0,A>0);
TestYacas(Arg(Exp(2*I*Pi/3)),2*Pi/3);

TestYacas(Content(1/2*x+1/2),1/2);
TestYacas(PrimitivePart(1/2*x+1/2),x+1);
TestYacas(Content(1/2*x+1/3),1/6);
TestYacas(PrimitivePart(1/2*x+1/3),3*x+2);

// Mod generated a stack overflow on floats.
Verify(Mod(1.2,3.4),6/5);
Verify(N(Mod(-1.2,3.4)),2.2);
Verify(Mod(-12/10,34/10),11/5);
// just a test to see if Verify still gives correct error Verify(N(Mod(-12/10,34/10)),11/5);


// some reports:

LocalSymbols(f,p,a,b,x,n)
[
  f(_n) <-- Apply("D",{x,n, x^n});
  Verify(f(10)-(10!));

  p := a+2-(a+1);
  Verify(Simplify(x^p),x);
];

LocalSymbols(f,p,a,b,x,n,simple,u,v)
[
  simple := {
            Exp(_a)*Exp(_b) <- Exp(a+b), 
            Exp(_a)*_u*Exp(_b) <- u*Exp(a+b),
            _u*Exp(_a)*Exp(_b) <- u*Exp(a+b),
            Exp(_a)*Exp(_b)*_u <- u*Exp(a+b),
            _u*Exp(_a)*_v*Exp(_b) <- u*v*Exp(a+b),
            Exp(_a)*_u*Exp(_b)*_v <- u*v*Exp(a+b),
            _u*Exp(_a)*Exp(_b)*_v <- u*v*Exp(a+b),
            _u*Exp(_a)*_v*Exp(_b)*_w <- u*v*w*Exp(a+b)
          };

  a := Simplify(Exp(x)*(D(x) x*Exp(-x)));
  b := Exp(x)*Exp(-x)-Exp(x)*x*Exp(-x);

  a:= (a /: simple);
  b:= (b /: simple);
  
  Verify(Simplify(a-(1-x)),0);
  Verify(Simplify(b-(1-x)),0);

];

// Verify that postfix operators can be applied one after the other
// without brackets
Verify((3!) !, 720);
Verify(3! !, 720);

TestYacas(TrigSimpCombine(Exp(A*X)),Exp(A*X));
TestYacas(TrigSimpCombine(x^Sin(a*x+b)),x^Sin(a*x+b));
Verify(CanBeUni(x^(-1)),False);


f(x):=Eval(Factor(x))=x;
Verify(f(703), True);
Verify(f(485), True);
Verify(f(170410240), True);





/* bug reported by Jonathan:
   All functions that do not have Taylor Expansions about
   the given point go into infinite loops.
 */

Verify(Taylor(x,0,5) Ln(x),Undefined);
Verify(Taylor(x,0,5) 1/x,Undefined);
Verify(Taylor(x,0,5) 1/Sin(x),Undefined);

// Yacas used to not simplify the following, due to Pi being
// considered constant. The expression was thus not expanded
// as a univariate polynomial in Pi
TestYacas(2*Pi/3,(Pi-Pi/3));

TestYacas(( a*(Sqrt(Pi))^2/2), (a*Pi)/2);
TestYacas(( 3*(Sqrt(Pi))^2/2), (3*Pi)/2); 
TestYacas(( a*(Sqrt(b ))^2/2), (a*b)/2);

// Bug was found: gcd sometimes returned 0! Very bad, since the 
// value returned by gcd is usually used to divide out greatest
// common divisors, and dividing by zero is not a good idea.
Verify(Gcd(0,0),1);
Verify(Gcd({0}),1);

// Factorize didn't check for correct input
Verify(Factorize(10), Factorize(10));
Verify(Factorize(-1), Factorize(-1));
Verify(Factorize(Infinity), Factorize(Infinity));
Verify(Factorize(1 .. 10),3628800);

//
TestYacas(Sin(Pi-22),-Sin(22-Pi));
TestYacas(Cos(Pi-22), Cos(22-Pi));

// Verify that some matrix functions accept only positive
// integer arguments. Regression test for the fact that the functions
// in linalg.rep/ didn't check their arguments. 

// Note: Jonathan, perhaps some functions could return something
// useful if the argument passed in is just a number? I'd imagine
// Inverse(-2) <-- -1/2 would not be inconsistent?

Verify(ZeroMatrix(-2,-2),ZeroMatrix(-2,-2));
Verify(Identity(-2),Identity(-2));
//Verify(LeviCivita(2),LeviCivita(2));
//Verify(Permutations(2),Permutations(2));
//Verify(InProduct(-2,-2),InProduct(-2,-2));
//Verify(CrossProduct(-2,-2),CrossProduct(-2,-2));
//Verify(BaseVector(-2,-2),BaseVector(-2,-2));
//Verify(DiagonalMatrix(-2),DiagonalMatrix(-2));
//Verify(Normalize(-2),Normalize(-2));
//Verify(Transpose(-2),Transpose(-2));
//Verify(Determinant(-2),Determinant(-2));
//Verify(CoFactor(-2,-2,-2),CoFactor(-2,-2,-2));
//Verify(Inverse(-2),Inverse(-2));
//Verify(Trace(-2),Trace(-2));
//Verify(SylvesterMatrix(-2,-2,-2),SylvesterMatrix(-2,-2,-2));
KnownFailure(Verify(ZeroVector(-2),ZeroVector(-2)));



