Verify( Lucas(143), {767772505664398093937756525279,1242282009792667284144565908482});
Verify( CatalanNumber(6), 132 );
Verify( CatalanNumber(10), 16796 );
Verify( Fibonacci(242), 168083057059453008835412295811648513482449585399521 );

Testing("Integer logarithms and roots");

Verify(
IntLog(23^45, 67)
, 33
);

Verify(
IntLog(1, 67)
, 0
);
Verify(
IntLog(2, 67)
, 0
);
Verify(
IntLog(0, 67)
, 0
);
Verify(
IntLog(1, 1)
, Undefined
);
Verify(
IntLog(2, 1)
, Undefined
);

Verify(
IntLog(256^8, 4)
, 32
);

Verify(
IntLog(256^8-1, 4)
, 31
);

Verify(
IntNthRoot(65537^33, 11)
, 281487861809153
);

Testing("Factorial");
Verify(261! - 261*260!, 0);
Verify(300! / 250!, 251***300);

Verify(Repunit(3), 111 );
Verify(HarmonicNumber(5), 137/60 );

Verify( Subfactorial(0), 1 );
Verify( Subfactorial(21), 18795307255050944540 );

Verify( Divisors(180), 18 );
Verify( DivisorsSum(180), 546 );

Verify( IsAmicablePair(200958394875 ,209194708485 ), True );
Verify( IsAmicablePair(220,284),True );

Verify( IsComposite(100), True );
Verify( IsComposite(1), False );
Verify( IsComposite(37), False );

Verify( IsTwinPrime(71), True );
Verify( IsTwinPrime(1), False );
Verify( IsTwinPrime(22), False );

Verify( DigitalRoot(18), 9 );
Verify( DigitalRoot(15), 6 );

Verify( IsIrregularPrime(37), True );
Verify( IsIrregularPrime(59), True );
Verify( IsIrregularPrime(1), False );
Verify( IsIrregularPrime(11), False );

Verify( Gcd( 324 + 1608*I, -11800 + 7900*I ),Complex(-52,16) );
Verify( Gcd( 7300 + 12*I, 2700 + 100*I), Complex(-4,4) );

Verify( Lcm({7,11,13,17}), 7*11*13*17 );
Verify( IsCoprime(11,13), True );
Verify( IsCoprime(1 .. 10), False );
Verify( IsCoprime({9,40}), True );

Verify( IsCarmichaelNumber( {561,1105,1729,2465,2821,6601,8911} ),{True,True,True,True,True,True,True} );
Verify( IsCarmichaelNumber( {0,1,2,1727,2463,2823,6603} ),{False,False,False,False,False,False,False} );



Testing("Random numbers");
Local(r1, r2, r3, x1, x2, x3);

r1:=RngCreate();	// create a default RNG object, return structure
r2:=RngCreate(12345);	// create RNG object with given seed
RandomSeed(12345);	// initialize the global RNG with the same seed
r3:=RngCreate(seed=12345, engine=advanced, dist=gauss);	// test advanced options

Rng(r1);
Rng(r1);
x1:=Rng(r2);
Verify(x1, Random());
x2:=Rng(r2);
x3:=Rng(r3);

Verify(Rng(r3)=x3, False);
Verify(x1=x2, False);
RngSeed(r2, 12345);
Verify(Rng(r2), x1);	// reproducible number
Verify(Rng(r2), x2);	// reproducible number
RngSeed(r3, 12345);
Verify(Rng(r3), x3);	// reproducible number

Verify(PartitionsP(1),1);
Verify(PartitionsP(2),2);
Verify(PartitionsP(3),3);
Verify(PartitionsP(4),5);
Verify(PartitionsP(13),101);
// This takes about 18 seconds, useful for benchmarking
//Verify( PartitionsP(4096), 6927233917602120527467409170319882882996950147283323368445315320451 );

Verify(Euler(16),19391512145);

