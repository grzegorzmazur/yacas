
RANLIB = ranlib
CC = cc # gcc

# Uncomment these if you want to use gmp for numerics
# NUMBER_LIB = gmpnumbers-d.o
# NUMBER_LN  = -lgmp

# Uncomment these if you want to use the yacas internal numerics
NUMBER_LIB = yacasnumbers-d.o
NUMBER_LN  = 

OBJS = anumber-d.o arggetter-d.o arrayclass-d.o commandline-d.o \
	deffile-d.o errors-d.o genericobject-d.o genericstructs-d.o \
	grower-d.o infixparser-d.o lispatom-d.o lispcleanupstack-d.o         \
	lispenvironment-d.o lispeval-d.o lispevalhash-d.o lisphash-d.o       \
	lispio-d.o lispobject-d.o lispparser-d.o lispplugin-d.o lispstring-d.o  \
	lispuserfunc-d.o mathcommands-d.o mathcommands2-d.o mathcommands3-d.o  \
	mathenvironment-d.o mathuserfunc-d.o mathutil-d.o patcher-d.o          \
	patternclass-d.o patterns-d.o platmath-d.o standard-d.o                \
	stdcommandline-d.o stdfileio-d.o stdstubs-d.o obmalloc-d.o stringio-d.o             \
	substitute-d.o tokenizer-d.o  ctokenizer-d.o xmltokenizer-d.o         \
	yacasapi-d.o $(NUMBER_LIB) unipoly-d.o elfdll-d.o obmalloc-d.o archiver-d.o 

.SUFFIXES: .cpp 

%-d.o: %.cpp
	$(CC) -x c++ $(INC) -c $< -o $@

all: libyacasdebug.a yacasdebug

INC = -I./plat/linux32/  -DUSE_ASSERT -DDEBUG_MODE -DSCRIPT_DIR="\"./\"" -DVERSION="\"Debug\"" \
	-DUSE_ASSERT -DYACAS_DEBUG

libyacasdebug.a : $(OBJS)
	$(AR) cru libyacasdebug.a $(OBJS)
	$(RANLIB) -s libyacasdebug.a

yacasdebug: yacasmain-d.o elfdll-d.o commandline-d.o unixcommandline-d.o stdcommandline-d.o debugmem-d.o libyacasdebug.a
	$(CC) -o yacasdebug yacasmain-d.o elfdll-d.o commandline-d.o unixcommandline-d.o stdcommandline-d.o debugmem-d.o libyacasdebug.a -lm  $(NUMBER_LN)

#	-rm -f libyacasdebug.a

include depend.dep

testscriptdir = ../scripts/
yacastest = ./yacasdebug -pc --rootdir $(testscriptdir)
testtarget = debugtest

include ../scripts/maketest

        
