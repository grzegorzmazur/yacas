BigNumber.java:    /*TODO FIXME ??? Still needed???
BigNumber.java:      decimal = new BigDecimal(aString); //TODO FIXME does not listen to aBase!!!
BigNumber.java:    //TODO FIXME
BigNumber.java:      //TODO fixme
BigNumber.java://TODO fixme    LispError.Check(!IsZero(aZ),LispError.KLispErrInvalidArg);
BigNumber.java:    //TODO fixme check that it works as needed
BranchingUserFunction.java:/*TODO fixme
BranchingUserFunction.java:/*TODO fixme
BranchingUserFunction.java:  /*TODO fixme
BranchingUserFunction.java:  /*TODO fixme
CommonLispTokenizer.java:REDO://TODO FIXME
CommonLispTokenizer.java:FALSEALARM://TODO FIXME
CommonLispTokenizer.java:FINISH://TODO FIXME
ConsoleApplet.java://TODO fixme    out.println("Type ?license or ?licence to see the GPL; type ?warranty for warranty info.");
ConsoleApplet.java://TODO fixme    out.println("To exit Yacas, enter  Exit(); or quit or Ctrl-c. Type ?? for help.\n");
ConsoleApplet.java://TODO fixme    out.println("Or type ?function for help on a function.\n");
ConsoleApplet.java://TODO fixme    out.println("Type 'restart' to restart Yacas.\n");
LispAtom.java:	  //TODO FIXME
LispEnvironment.java:  //TODO FIXME
LispEnvironment.java:  LispEnvironment(LispOutput aCurrentOutput/*TODO FIXME*/) throws Exception
LispEnvironment.java:    iStack = new YacasArgStack(5000 /*TODO FIXME*/);
LispError.java:      if (aError ==  KLispErrUser) return "User error //TODO FIXME";
LispError.java://TODO FIXME          if (theUserError != NULL) //TODO should always be true!
LispError.java://TODO FIXME              return theUserError;
LispError.java://TODO FIXME          break;
LispError.java:      String error = ErrorString(aError);//"Error number "+aError+" (//TODO FIXME still need to port over the string table)";
LispError.java://TODO FIXME      ShowStack(aEnvironment);
LispError.java:/*TODO FIXME
LispError.java://TODO FIXME          ShowStack(aEnvironment);
LispError.java://TODO FIXME          ShowStack(aEnvironment);
LispGenericClass.java:      //TODO FIXME
LispHashTable.java:	  //TODO FIXME
LispNumber.java://TODO FIXME enable this in the end	  Number(aBasePrecision);
LispNumber.java:      iString = iNumber.ToString(0/*TODO FIXME*/,10);
LispNumber.java:      iNumber = new BigNumber(str, aPrecision, 10/*TODO FIXME BASE10*/);
LispNumber.java:	  /*TODO FIXME
LispObject.java:			//TODO FIXME oddly enough the following lines were not present in the C++ code!
LispObject.java://TODO FIXME shouldn't these be removed from the Yacas main source tree too?    void SetFlag(int aFlag);
LispObject.java://TODO FIXME shouldn't these be removed from the Yacas main source tree too?    void ResetFlag(int aFlag);
LispParser.java:	if (token.length() == 0) //TODO FIXME either token == null or token.length() == 0?
LispParser.java:        iter  = (aResult.Get().Next()); //TODO FIXME 
LispParser.java:        LispError.Check(token.length() > 0,LispError.KInvalidToken); //TODO FIXME 
LispParser.java:        iter = (iter.Get().Next()); //TODO FIXME 
LispParser.java:    if (aToken.length() == 0) //TODO FIXME either token == null or token.length() == 0?
LispPtrArray.java:	  //TODO FIXME
LispSubList.java://TODO FIXME
LispTokenizer.java://REDO: //TODO FIXME
LispTokenizer.java:				//TODO FIXME is following append char correct?
LispTokenizer.java:					//TODO FIXME is following append char correct?
LispTokenizer.java:				//TODO FIXME is following append char correct?
MacroUserFunction.java:/*TODO fixme
MacroUserFunction.java:/*TODO fixme
MacroUserFunction.java:/*TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : DllDirectory");//TODO fixme
MathCommands.java:      /* TODO fixme this is wrong in the C++ version too, we need to have this in 
MathCommands.java:      /* TODO fixme this is wrong in the C++ version too, we need to have this in 
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispPi (returning a fixed approximation for it for now)");//TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : FastMod");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : CustomEval");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : CustomEvalExpression");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : CustomEvalResult");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispCustomEvalLocals");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispCustomEvalStop");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispTraceRule");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : TraceStack");////TODO fixme
MathCommands.java:      //TODO fixme this routine should actually be called SlowIsPrime ;-)
MathCommands.java:      //TODO fixme I am sure this can be optimized still
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : PatchLoad");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : PatchString");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : DllLoad");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : DllUnload");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : DllEnumerate");////TODO fixme
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispCommonLispTokenizer");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispCTokenizer");//TODO FIXME
MathCommands.java:      //TODO fixme need to enable this in the end if plugins are available
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispExit");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispExitRequested");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispHistorySize");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispStackSize");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispIsPromptShown");//TODO FIXME
MathCommands.java:      aEnvironment.iCurrentOutput.Write("Function not yet implemented : LispReadCmdLineString");//TODO FIXME
YacasConsole.java://TODO fixme    System.out.println("Type ?license or ?licence to see the GPL; type ?warranty for warranty info.");
YacasConsole.java:/*TODO fixme    
YacasNotebookComponent.java:/*TODO fixme
