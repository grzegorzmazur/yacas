SubList:arggetter.cc:    CheckArgType(aResult.Get()->SubList() != NULL ,iNrArgsParsed, iArguments,iEnvironment,
SubList:arggetter.cc~:    CheckArgType(aResult.Get()->SubList() != NULL ,iNrArgsParsed, iArguments,iEnvironment,
SubList:infixparser.cc:    InternalReverseList(subList.Get()->SubList()->Get()->Next(),
SubList:infixparser.cc:                     subList.Get()->SubList()->Get()->Next());
SubList:infixparser.cc:    LispPtr* subList = aExpression.Get()->SubList();
SubList:lispenvironment.cc:    Check(iLocals.Get()->SubList() != NULL,KLispErrInvalidStack);
SubList:lispenvironment.cc:    LispIterator iter(*iLocals.Get()->SubList());
SubList:lispenvironment.cc:        LispPtr* sub = iter()->SubList();
SubList:lispenvironment.cc:        local->Get()->SubList()->Get()->Next().Set(aValue.Get());
SubList:lispenvironment.cc:        aResult.Set(local->Get()->SubList()->Get()->Next().Get());
SubList:lispenvironment.cc://TODO remove        return &local->Get()->SubList()->Get()->Next();
SubList:lispenvironment.cc:        local->Get()->SubList()->Get()->Next().Set(NULL);
SubList:lispenvironment.cc:        LISPASSERT(iLocals.Get()->SubList()!=NULL);
SubList:lispenvironment.cc:        newly.Set(LispSubList::New(iLocals.Get()->SubList()->Get()));
SubList:lispenvironment.cc:    LISPASSERT(iLocals.Get()->SubList() != NULL);
SubList:lispenvironment.cc:    newitem->SubList()->Get()->Next().Set(aValue);
SubList:lispenvironment.cc:    newitem->Next().Set(iLocals.Get()->SubList()->Get());
SubList:lispenvironment.cc:    iLocals.Get()->SubList()->Set(newly.Get());
SubList:lispenvironment.cc~:    Check(iLocals.Get()->SubList() != NULL,KLispErrInvalidStack);
SubList:lispenvironment.cc~:    LispIterator iter(*iLocals.Get()->SubList());
SubList:lispenvironment.cc~:        Check(iter()->SubList() != NULL,KLispErrInvalidStack);
SubList:lispenvironment.cc~:        if (iter()->SubList()->Get()->String() == aVariable)
SubList:lispenvironment.cc~:        local->Get()->SubList()->Get()->Next().Set(aValue.Get());
SubList:lispenvironment.cc~:        aResult.Set(local->Get()->SubList()->Get()->Next().Get());
SubList:lispenvironment.cc~://TODO remove        return &local->Get()->SubList()->Get()->Next();
SubList:lispenvironment.cc~:        local->Get()->SubList()->Get()->Next().Set(NULL);
SubList:lispenvironment.cc~:        LISPASSERT(iLocals.Get()->SubList()!=NULL);
SubList:lispenvironment.cc~:        newly.Set(LispSubList::New(iLocals.Get()->SubList()->Get()));
SubList:lispenvironment.cc~:    LISPASSERT(iLocals.Get()->SubList() != NULL);
SubList:lispenvironment.cc~:    newitem->SubList()->Get()->Next().Set(aValue);
SubList:lispenvironment.cc~:    newitem->Next().Set(iLocals.Get()->SubList()->Get());
SubList:lispenvironment.cc~:    iLocals.Get()->SubList()->Set(newly.Get());
SubList:lispeval.cc:        LispPtr* subList = aExpression.Get()->SubList();
SubList:lispeval.cc:    LispPtr* subList = aExpression.Get()->SubList();
SubList:lispeval.cc~:        LispPtr* subList = aExpression.Get()->SubList();
SubList:lispeval.cc~:    LispPtr* subList = aExpression.Get()->SubList();
SubList:lispobject.inl:    Check(iPtr->Get()->SubList() != NULL,KLispErrNotList);
SubList:lispobject.inl:    iPtr = iPtr->Get()->SubList();
SubList:lispobject.inl~:    Check(iPtr->Get()->SubList() != NULL,KLispErrNotList);
SubList:lispobject.inl~:    iPtr = iPtr->Get()->SubList();
SubList:lispparser.cc:        else if (iter->Get()->SubList() != NULL)
SubList:lispparser.cc:            Print(*(iter->Get()->SubList()),aOutput);
SubList:mathcommands.cc:    head.Get()->Next().Set(aResult.Get()->SubList()->Get());
SubList:mathcommands.cc:    aResult.Get()->SubList()->Set(head.Get());
SubList:mathcommands.cc:    head.Get()->Next().Set(list.Get()->SubList()->Get());
SubList:mathcommands.cc:    InternalReverseList(reversed.Get()->Next(), list.Get()->SubList()->Get()->Next());
SubList:mathcommands.cc:    LispPtr* subList = evaluated.Get()->SubList();
SubList:mathcommands.cc:        InternalFlatCopy(*tail.Ptr(),evaluated.Get()->SubList()->Get()->Next());
SubList:mathcommands.cc:        copied.Set(evaluated.Get()->SubList()->Get());
SubList:mathcommands.cc:        InternalFlatCopy(copied,*evaluated.Get()->SubList());
SubList:mathcommands.cc:    InternalFlatCopy(copied,*list.Get()->SubList());
SubList:mathcommands.cc:    InternalFlatCopy(copied,*evaluated.Get()->SubList());
SubList:mathcommands.cc:        copied.Set(evaluated.Get()->SubList()->Get());
SubList:mathcommands.cc:        InternalFlatCopy(copied,*evaluated.Get()->SubList());
SubList:mathcommands.cc:        copied.Set(evaluated.Get()->SubList()->Get());
SubList:mathcommands.cc:        InternalFlatCopy(copied,*evaluated.Get()->SubList());
SubList:mathcommands.cc:                                 args.Get()->SubList()->Get()->Next());
SubList:mathcommands.cc:                    result.Get()->SubList()!=NULL);
SubList:mathcommands.cc:    LispPtr *ptr = aArguments.Get()->Next().Get()->SubList();
SubList:mathcommands.cc:    LispPtr* subList = evaluated.Get()->SubList();
SubList:mathcommands.cc:    CHK_ARG(iter()->SubList() != NULL,1);
SubList:mathcommands.cc:    CHK_ARG(iter()->SubList() != NULL,2);
SubList:mathcommands3.cc:    CHK_ARG(args.Get()->SubList() != NULL,2);
SubList:mathcommands3.cc:    CHK(args.Get()->SubList()->Get() != NULL,2);
SubList:mathcommands3.cc:                    args.Get()->SubList()->Get()->Next());
SubList:mathcommands3.cc:        CHK_ARG(oper.Get()->SubList() != NULL,1);
SubList:mathcommands3.cc:        CHK_ARG(oper.Get()->SubList()->Get() != NULL,1);
SubList:mathcommands3.cc:        oper2.Set(oper.Get()->SubList()->Get()->Next().Get());
SubList:mathcommands3.cc:        CHK_ARG(oper2.Get()->SubList() != NULL,1);
SubList:mathcommands3.cc:        CHK_ARG(oper2.Get()->SubList()->Get() != NULL,1);
SubList:mathcommands3.cc:        oper2.Set(oper2.Get()->SubList()->Get()->Next().Get());
SubList:mathcommands3.cc:        args2.Set(args.Get()->SubList()->Get()->Next().Get());
SubList:patterns.cc:    if (aExpression.Get()->SubList() == NULL)
SubList:patterns.cc:    if (aPattern->SubList())
SubList:patterns.cc:        LispPtr* sublist = aPattern->SubList();
SubList:patterns.cc~:    if (aExpression.Get()->SubList() == NULL)
SubList:patterns.cc~:    if (aPattern->SubList())
SubList:patterns.cc~:        LispPtr* sublist = aPattern->SubList();
SubList:standard.cc:    if (aPtr.Get()->SubList() == NULL)
SubList:standard.cc:    if (aPtr.Get()->SubList()->Get() == NULL)
SubList:standard.cc:    if (!(*aPtr.Get()->SubList()->Get()->String() == "List"))
SubList:standard.cc:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
SubList:standard.cc:    LispIterator iter(*aArg.Get()->SubList());
SubList:standard.cc:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
SubList:standard.cc:    LispPtr* iter = aArg.Get()->SubList();
SubList:standard.cc:    if (aExpression1.Get()->SubList() == aExpression2.Get()->SubList())
SubList:standard.cc:    if (aExpression1.Get()->SubList())
SubList:standard.cc:        if (!aExpression2.Get()->SubList())
SubList:standard.cc:        LispIterator iter1(*aExpression1.Get()->SubList());
SubList:standard.cc:        LispIterator iter2(*aExpression2.Get()->SubList());
SubList:standard.cc~:    if (aPtr.Get()->SubList() == NULL)
SubList:standard.cc~:    if (aPtr.Get()->SubList()->Get() == NULL)
SubList:standard.cc~:    if (!(*aPtr.Get()->SubList()->Get()->String() == "List"))
SubList:standard.cc~:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
SubList:standard.cc~:    LispIterator iter(*aArg.Get()->SubList());
SubList:standard.cc~:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
SubList:standard.cc~:    LispPtr* iter = aArg.Get()->SubList();
SubList:standard.cc~:    if (aExpression1.Get()->SubList() == aExpression2.Get()->SubList())
SubList:standard.cc~:    if (aExpression1.Get()->SubList())
SubList:standard.cc~:        if (!aExpression2.Get()->SubList())
SubList:standard.cc~:        LispIterator iter1(*aExpression1.Get()->SubList());
SubList:standard.cc~:        LispIterator iter2(*aExpression2.Get()->SubList());
SubList:substitute.cc:        LispPtr* oldList = object->SubList();
Binary file a.out matches
arggetter.cc:    CheckArgType(aResult.Get()->SubList() != NULL ,iNrArgsParsed, iArguments,iEnvironment,
arggetter.cc~:    CheckArgType(aResult.Get()->SubList() != NULL ,iNrArgsParsed, iArguments,iEnvironment,
infixparser.cc:    InternalReverseList(subList.Get()->SubList()->Get()->Next(),
infixparser.cc:                     subList.Get()->SubList()->Get()->Next());
infixparser.cc:    LispPtr* subList = aExpression.Get()->SubList();
Binary file libyacas.a matches
lispenvironment.cc:    Check(iLocals.Get()->SubList() != NULL,KLispErrInvalidStack);
lispenvironment.cc:    LispIterator iter(*iLocals.Get()->SubList());
lispenvironment.cc:        LispPtr* sub = iter()->SubList();
lispenvironment.cc:        local->Get()->SubList()->Get()->Next().Set(aValue.Get());
lispenvironment.cc:        aResult.Set(local->Get()->SubList()->Get()->Next().Get());
lispenvironment.cc://TODO remove        return &local->Get()->SubList()->Get()->Next();
lispenvironment.cc:        local->Get()->SubList()->Get()->Next().Set(NULL);
lispenvironment.cc:        LISPASSERT(iLocals.Get()->SubList()!=NULL);
lispenvironment.cc:        newly.Set(LispSubList::New(iLocals.Get()->SubList()->Get()));
lispenvironment.cc:    LISPASSERT(iLocals.Get()->SubList() != NULL);
lispenvironment.cc:    newitem->SubList()->Get()->Next().Set(aValue);
lispenvironment.cc:    newitem->Next().Set(iLocals.Get()->SubList()->Get());
lispenvironment.cc:    iLocals.Get()->SubList()->Set(newly.Get());
lispenvironment.cc~:    Check(iLocals.Get()->SubList() != NULL,KLispErrInvalidStack);
lispenvironment.cc~:    LispIterator iter(*iLocals.Get()->SubList());
lispenvironment.cc~:        Check(iter()->SubList() != NULL,KLispErrInvalidStack);
lispenvironment.cc~:        if (iter()->SubList()->Get()->String() == aVariable)
lispenvironment.cc~:        local->Get()->SubList()->Get()->Next().Set(aValue.Get());
lispenvironment.cc~:        aResult.Set(local->Get()->SubList()->Get()->Next().Get());
lispenvironment.cc~://TODO remove        return &local->Get()->SubList()->Get()->Next();
lispenvironment.cc~:        local->Get()->SubList()->Get()->Next().Set(NULL);
lispenvironment.cc~:        LISPASSERT(iLocals.Get()->SubList()!=NULL);
lispenvironment.cc~:        newly.Set(LispSubList::New(iLocals.Get()->SubList()->Get()));
lispenvironment.cc~:    LISPASSERT(iLocals.Get()->SubList() != NULL);
lispenvironment.cc~:    newitem->SubList()->Get()->Next().Set(aValue);
lispenvironment.cc~:    newitem->Next().Set(iLocals.Get()->SubList()->Get());
lispenvironment.cc~:    iLocals.Get()->SubList()->Set(newly.Get());
Binary file lispenvironment.o matches
lispeval.cc:        LispPtr* subList = aExpression.Get()->SubList();
lispeval.cc:    LispPtr* subList = aExpression.Get()->SubList();
lispeval.cc~:        LispPtr* subList = aExpression.Get()->SubList();
lispeval.cc~:    LispPtr* subList = aExpression.Get()->SubList();
lispobject.inl:    Check(iPtr->Get()->SubList() != NULL,KLispErrNotList);
lispobject.inl:    iPtr = iPtr->Get()->SubList();
lispobject.inl~:    Check(iPtr->Get()->SubList() != NULL,KLispErrNotList);
lispobject.inl~:    iPtr = iPtr->Get()->SubList();
lispparser.cc:        else if (iter->Get()->SubList() != NULL)
lispparser.cc:            Print(*(iter->Get()->SubList()),aOutput);
mathcommands.cc:    head.Get()->Next().Set(aResult.Get()->SubList()->Get());
mathcommands.cc:    aResult.Get()->SubList()->Set(head.Get());
mathcommands.cc:    head.Get()->Next().Set(list.Get()->SubList()->Get());
mathcommands.cc:    InternalReverseList(reversed.Get()->Next(), list.Get()->SubList()->Get()->Next());
mathcommands.cc:    LispPtr* subList = evaluated.Get()->SubList();
mathcommands.cc:        InternalFlatCopy(*tail.Ptr(),evaluated.Get()->SubList()->Get()->Next());
mathcommands.cc:        copied.Set(evaluated.Get()->SubList()->Get());
mathcommands.cc:        InternalFlatCopy(copied,*evaluated.Get()->SubList());
mathcommands.cc:    InternalFlatCopy(copied,*list.Get()->SubList());
mathcommands.cc:    InternalFlatCopy(copied,*evaluated.Get()->SubList());
mathcommands.cc:        copied.Set(evaluated.Get()->SubList()->Get());
mathcommands.cc:        InternalFlatCopy(copied,*evaluated.Get()->SubList());
mathcommands.cc:        copied.Set(evaluated.Get()->SubList()->Get());
mathcommands.cc:        InternalFlatCopy(copied,*evaluated.Get()->SubList());
mathcommands.cc:                                 args.Get()->SubList()->Get()->Next());
mathcommands.cc:                    result.Get()->SubList()!=NULL);
mathcommands.cc:    LispPtr *ptr = aArguments.Get()->Next().Get()->SubList();
mathcommands.cc:    LispPtr* subList = evaluated.Get()->SubList();
mathcommands.cc:    CHK_ARG(iter()->SubList() != NULL,1);
mathcommands.cc:    CHK_ARG(iter()->SubList() != NULL,2);
mathcommands3.cc:    CHK_ARG(args.Get()->SubList() != NULL,2);
mathcommands3.cc:    CHK(args.Get()->SubList()->Get() != NULL,2);
mathcommands3.cc:                    args.Get()->SubList()->Get()->Next());
mathcommands3.cc:        CHK_ARG(oper.Get()->SubList() != NULL,1);
mathcommands3.cc:        CHK_ARG(oper.Get()->SubList()->Get() != NULL,1);
mathcommands3.cc:        oper2.Set(oper.Get()->SubList()->Get()->Next().Get());
mathcommands3.cc:        CHK_ARG(oper2.Get()->SubList() != NULL,1);
mathcommands3.cc:        CHK_ARG(oper2.Get()->SubList()->Get() != NULL,1);
mathcommands3.cc:        oper2.Set(oper2.Get()->SubList()->Get()->Next().Get());
mathcommands3.cc:        args2.Set(args.Get()->SubList()->Get()->Next().Get());
patterns.cc:    if (aExpression.Get()->SubList() == NULL)
patterns.cc:    if (aPattern->SubList())
patterns.cc:        LispPtr* sublist = aPattern->SubList();
patterns.cc~:    if (aExpression.Get()->SubList() == NULL)
patterns.cc~:    if (aPattern->SubList())
patterns.cc~:        LispPtr* sublist = aPattern->SubList();
standard.cc:    if (aPtr.Get()->SubList() == NULL)
standard.cc:    if (aPtr.Get()->SubList()->Get() == NULL)
standard.cc:    if (!(*aPtr.Get()->SubList()->Get()->String() == "List"))
standard.cc:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
standard.cc:    LispIterator iter(*aArg.Get()->SubList());
standard.cc:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
standard.cc:    LispPtr* iter = aArg.Get()->SubList();
standard.cc:    if (aExpression1.Get()->SubList() == aExpression2.Get()->SubList())
standard.cc:    if (aExpression1.Get()->SubList())
standard.cc:        if (!aExpression2.Get()->SubList())
standard.cc:        LispIterator iter1(*aExpression1.Get()->SubList());
standard.cc:        LispIterator iter2(*aExpression2.Get()->SubList());
standard.cc~:    if (aPtr.Get()->SubList() == NULL)
standard.cc~:    if (aPtr.Get()->SubList()->Get() == NULL)
standard.cc~:    if (!(*aPtr.Get()->SubList()->Get()->String() == "List"))
standard.cc~:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
standard.cc~:    LispIterator iter(*aArg.Get()->SubList());
standard.cc~:    Check(aArg.Get()->SubList() != NULL,KLispErrInvalidArg);
standard.cc~:    LispPtr* iter = aArg.Get()->SubList();
standard.cc~:    if (aExpression1.Get()->SubList() == aExpression2.Get()->SubList())
standard.cc~:    if (aExpression1.Get()->SubList())
standard.cc~:        if (!aExpression2.Get()->SubList())
standard.cc~:        LispIterator iter1(*aExpression1.Get()->SubList());
standard.cc~:        LispIterator iter2(*aExpression2.Get()->SubList());
substitute.cc:        LispPtr* oldList = object->SubList();
Binary file yacas matches
