Abs:Abs(-1/2)<sep>Abs(3+4*I)<sep>Abs(2):
Add:Add(1,4,9)<sep>Add({1,2,3})<sep>Add(1 .. 10):
Average:Average({1,2,3,4,5})<sep>Average({2,6,7}):
Div:Div(5,3)<sep>Div(x^2-1,x+1):
Mod:Mod(5,3)<sep>Mod((x+1)^3,x^2):
Gcd:Gcd(55,10)<sep>Gcd({60,24,120})<sep>Gcd( 7300 + 12*I, 2700 + 100*I)<sep>Gcd((x+1)^3*(x-1)^2,(x+1)^2*(x-1)*3):
Lcm:Lcm(60,24)<sep>Lcm({3,5,7,9}):
FromBase:FromBase(2,"111111"):
ToBase:ToBase(16,255):
N:N(1/2)<sep>N(Sin(1),20)<sep>N(Pi,20):
Rationalize:Rationalize({1.2,3.123,4.5}):
NthRoot:NthRoot(12,2)<sep>NthRoot(81,3)<sep>NthRoot(3255552,2)<sep>NthRoot(3255552,3):
ContFrac:ContFrac(N(Pi))<sep>ContFrac(x^2+x+1, 3):
Decimal:Decimal(1/3):
TruncRadian:TruncRadian(6.29):
Floor:Floor(1.1)<sep>Floor(-1.1):
Ceil:Ceil(1.1)<sep>Ceil(-1.1):
Round:Round(1.49)<sep>Round(1.51)<sep>Round(-1.49)<sep>Round(-1.51):
Pslq:Pslq({ 2*Pi+3*Exp(1), Pi, Exp(1) },20):
Select:Select("IsPrime", 1 .. 100)<sep>Select("IsInteger",{a,b,2,c,3,d,4,e,f}):
IsPrime:IsPrime(1)<sep>IsPrime(2)<sep>IsPrime(10)<sep>IsPrime(23)<sep>Select("IsPrime", 1 .. 100):
NextPrime:NextPrime(5):
Factors:Factors(24)<sep>Factors(2*x^3 + 3*x^2 - 1):
Factor:Factor(24)<sep>Factor(2*x^3 + 3*x^2 - 1):
PAdicExpand:PAdicExpand(1234, 10)<sep>PAdicExpand(x^3, x-1):
Sin:N(Sin(1),20)<sep>Sin(Pi/4):
Cos:N(Cos(1),20)<sep>Cos(Pi/4):
Tan:N(Tan(1),20)<sep>Tan(Pi/4):
ArcCos:ArcCos(1):
ArcSin:ArcSin(1):
ArcTan:ArcTan(1):
Exp:Exp(0)<sep>Exp(I*Pi)<sep>N(Exp(1)):
Ln:Ln(1)<sep>Ln(Exp(x))<sep>D(x) Ln(x):
Sqrt:Sqrt(16)<sep>Sqrt(15)<sep>N(Sqrt(15))<sep>Sqrt(4/9)<sep>Sqrt(-1):
Sign:Sign(2)<sep>Sign(-3)<sep>Sign(0)<sep>Sign(-3)*Abs(-3):
Complex:I<sep>3+4*I<sep>Complex(-2,0):
Re:Re(5)<sep>Re(I)<sep>Re(Complex(3,4)):
Im:Im(5)<sep>Im(I)<sep>Im(Complex(3,4)):
I:I<sep>3*I+2:
Conjugate:Conjugate(2)<sep>Conjugate(Complex(a,b)):
Arg:Arg(2)<sep>Arg(-1)<sep>Arg(1+I):
Bin:Bin(10, 4):
Sum:Sum(i, 1, 3, i^2)<sep>Sum(i,0,n,r^i)<sep>Sum(i,0,Infinity,(1/3)^i):
Factorize:Factorize({1,2,3,4})<sep>Factorize(i, 1, 4, i):
Plot2D:Plot2D(Sin(x))<sep>Plot2D(Sin(x)/x,-10\:10)<sep>Plot2D({Sin(x),Cos(x)}):
Max:Max(2,3)<sep>Max({5,8,4}):
Min:Min(2,3)<sep>Min({5,8,4}):
IsZero:IsZero(3.25)<sep>IsZero(0)<sep>IsZero(x):
IsRational:IsRational(5)<sep>IsRational(2/7)<sep>IsRational(0.5)<sep>IsRational(a/b)<sep>IsRational(x + 1/x):
Numer:Numer(2/7)<sep>Numer(a / x^2)<sep>Numer(5):
Denom:Denom(2/7)<sep>Denom(a / x^2)<sep>Denom(5):
Taylor:Taylor(x,0,9) Sin(x)<sep>Taylor(x,0,15)Cos(a*x)<sep>Taylor(x,0,7)Exp(a*x):
Newton:Newton(Sin(x),x,3,0.0001)<sep>Newton(x^2-1,x,2,0.0001,-5,5)<sep>Newton(x^2+1,x,2,0.0001,-5,5):
D:D(x)Sin(x)/x^2<sep>D(x)Sin(a*x)<sep>D(x,2)Sin(a*x):
Curl:Curl({x*y,x*y,x*y},{x,y,z}):
Diverge:Diverge({x*y,x*y,x*y},{x,y,z}):
Integrate:Integrate(x,a,b) Cos(x)<sep>Integrate(x) Cos(x)<sep>Integrate(x)x^3*Cos(a*x):
Simplify:Simplify(a*b*a^2/b-a^3)<sep>FactorialSimplify( (n-k+1)! / (n-k)! )<sep>FactorialSimplify(n! / Bin(n,k))<sep>FactorialSimplify(2^(n+1)/2^n)<sep>TrigSimpCombine(Cos(a)^2+Sin(a)^2)<sep>TrigSimpCombine(Cos(a)^2-Sin(a)^2)<sep>TrigSimpCombine(Cos(a)^2*Sin(b))<sep>RadSimp(Sqrt(9+4*Sqrt(2))):
RadSimp:RadSimp(Sqrt(9+4*Sqrt(2)))<sep>RadSimp(Sqrt(5+2*Sqrt(6))+Sqrt(5-2*Sqrt(6)))<sep>RadSimp(Sqrt(14+3*Sqrt(3+2*Sqrt(5-12*Sqrt(3-2*Sqrt(2)))))):
FactorialSimplify:FactorialSimplify( (n-k+1)! / (n-k)! )<sep>FactorialSimplify(n! / Bin(n,k))<sep>FactorialSimplify(2^(n+1)/2^n):
Solve:Solve(Cos(x) == 1/2, x)<sep>Solve(x / Sin(x) == 0, x)<sep>Solve(Sqrt(x) == 2, x):
SuchThat:SuchThat(a+b*x, x)<sep>SuchThat(Cos(a)+Cos(b)^2, Cos(b))<sep>SuchThat(Expand(a*x+b*x+c,x), x):
Subst:Subst(Cos(b), c) (Sin(a)+Cos(b)^2/c):
Eliminate:Eliminate(Cos(b), c, Sin(a)+Cos(b)^2/c):
PSolve:PSolve(b*x+a,x)<sep>PSolve(c*x^2+b*x+a,x):
Random:Random():
Limit:Limit(x,0) Sin(x)/x<sep>Limit(x,0,Left) 1/x<sep>Limit(x,0,Right) 1/x<sep>Limit(x,0) (x+1)^(Ln(a)/x)<sep>Limit(x,-Infinity)Exp(2*x)<sep>Limit(x,Infinity)(1+2/x)^x:
TrigSimpCombine:TrigSimpCombine(Cos(a)^2+Sin(a)^2)<sep>TrigSimpCombine(Cos(a)^2-Sin(a)^2)<sep>TrigSimpCombine(Cos(a)^2*Sin(b)):
LagrangeInterpolant:LagrangeInterpolant({0,1,2},{0,1,1}, x)<sep>LagrangeInterpolant({x1,x2,x3}, {y1,y2,y3}, x):
LeviCivita:LeviCivita({1,2,3})<sep>LeviCivita({2,1,3})<sep>LeviCivita({2,2,3}):
Permutations:Permutations({a,b,c}):
Dot:{1,2} . {3,4}<sep>{{1,2},{3,4}} . {5,6}<sep>{5,6} . {{1,2},{3,4}}<sep>{{1,2},{3,4}} . {{5,6},{7,8}}<sep>Dot({1,2},{3,4})<sep>Dot({{1,2},{3,4}},{5,6})<sep>Dot({5,6},{{1,2},{3,4}})<sep>Dot({{1,2} {3,4}},{{5,6},{7,8}}):
CrossProduct:{a,b,c} X {d,e,f}:
ZeroVector:ZeroVector(4):
BaseVector:BaseVector(2,4):
Identity:Identity(4):
ZeroMatrix:ZeroMatrix(3)<sep>ZeroMatrix(3,4):
DiagonalMatrix:DiagonalMatrix(1 .. 4)<sep>DiagonalMatrix({a,b,c,d}):
Normalize:Normalize({3,4}):
Transpose:Transpose({{a,b}}):
Determinant:Determinant(DiagonalMatrix(1 .. 4)):
Trace:Trace(DiagonalMatrix(1 .. 4)):
Inverse:Simplify(Inverse(DiagonalMatrix({a,b,c}))):
CharacteristicEquation:CharacteristicEquation(DiagonalMatrix({a,b,c}),x):
EigenValues:EigenValues({{1,2},{2,1}}):
EigenVectors:[Local(M); M\:={{1,2},{2,1}}; EigenVectors(M,EigenValues(M));]:
Expand:Expand((1+x)^5)<sep>Expand((1+x-y)^2, x)<sep>Expand((1+x-y)^2, {x,y}):
Degree:Degree(x^5+x-1)<sep>Degree(a+b*x^3, a)<sep>Degree(a+b*x^3, x):
Coef:Coef((a+x)^4,a,2)<sep>Coef((a+x)^4,a,0 .. 4):
Content:Content(2*x^2 + 4*x):
PrimitivePart:PrimitivePart(2*x^2 + 4*x):
RandomPoly:RandomPoly(x,3,-10,10):
FindRealRoots:FindRealRoots(Expand((x+3.1)^5*(x-6.23))):
Head:Head({a,b,c}):
Tail:Tail({a,b,c}):
Length:Length({a,b,c})<sep>Length("abcdef"):
Map:Map("+",{{a,b},{c,d}}):
RandomIntegerVector:RandomIntegerVector(4,-3,3):
MakeVector:MakeVector(a,3):
Reverse:Reverse({a,b,c,13,19}):
UnList:UnList({Cos, x}):
Listify:Listify(Cos(x)):
Concat:Concat({a,b}, {c,d})<sep>Concat({a,b}, {c,d}, {e}):
Delete:Delete({a,b,c,d,e,f}, 4):
Insert:Insert({a,b,c,d}, 4, x):
Replace:Replace({a,b,c,d,e,f}, 4, x):
Contains:Contains({a,b,c,d}, b)<sep>Contains({a,b,c,d},x)<sep>Contains({a,{1,2,3},z}, 1):
Find:Find({a,b,c,d,e,f}, d)<sep>Find({1,2,3,2,1}, 2)<sep>Find({1,2,3,2,1},4):
Append:Append({a,b,c,d}, 1):
Intersection:Intersection({a,b,c}, {b,c,d})<sep>Intersection({a,e,i,o,u},{f,o,u,r,t,e,e,n})<sep>Intersection({1,2,2,3,3,3}, {1,1,2,2,3,3}):
Union:Union({a,b,c}, {b,c,d})<sep>Union({a,e,i,o,u},{f,o,u,r,t,e,e,n})<sep>Union({1,2,2,3,3,3}, {2,2,3,3,4,4}):
Difference:Difference({a,b,c}, {b,c,d})<sep>Difference({a,e,i,o,u},{f,o,u,r,t,e,e,n})<sep>Difference({1,2,2,3,3,3}, {2,2,3,4,4}):
FillList:FillList(x, 5):
Flatten:Flatten(a+b*c+d,"+"):
UnFlatten:UnFlatten({a,b,c},"+",0)<sep>UnFlatten({a,b,c},"*",1):
Type:Type({a,b,c})<sep>Type(a*(b+c))<sep>Type(123):
VarList:VarList(Sin(x))<sep>VarList(x+a*y):
Table:Table(i!, i, 1, 9, 1)<sep>Table(i, i, 3, 16, 4)<sep>Table(i^2, i,10, 1, -1):
Where:x^2+y^2 Where x==2<sep>x^2+y^2 Where x==2 And y==3<sep>x^2+y^2 Where {x==2 And y==3}<sep>x^2+y^2 Where {x==2 And y==3,x==4 And y==5}:
Hold:Echo({ Hold(1+1), "=", 1+1 }):
Eval:Eval(Hold(1+1)):
While:[Local(x); x \:= 0; While (x! < 10^6) [ Echo({x, x!}); x++; ]; ]:
Until:[ Local(x); x \:= 0; Until (x! > 10^6) [ Echo({x, x!}); x++; ]; ]:
WithValue:WithValue(x, 3, x^2+y^2+1)<sep>WithValue({x,y}, {3,2}, x^2+y^2+1):
Time:Time(N(MathLog(1000),40)):
And:True And False<sep>And(True,True)<sep>False And a<sep>True And a<sep>And(True,a,True,b):
Or:True Or False<sep>False Or a<sep>Or(False,a,b,True):
Not:Not True<sep>Not False:
IsFreeOf:IsFreeOf(x, Sin(x))<sep>IsFreeOf(y, Sin(x))<sep>IsFreeOf(x, D(x) a*x+b)<sep>IsFreeOf({x,y}, Sin(x)):
IsEven:IsEven(4)<sep>IsEven(-1):
IsOdd:IsOdd(4)<sep>IsOdd(-1):
If:If(3>2, Echo("larger"),Echo("not larger"))<sep>If(3>2, Echo("larger")):
For:For (i\:=1, i<=10, i++) Echo({i, i!}):
ForEach:ForEach(i,{2,3,5,7,11}) Echo(i,"! = ", i!):
IsEvenFunction:IsEvenFunction(Cos(b*x),x)<sep>IsEvenFunction(Sin(b*x),x)<sep>IsEvenFunction(1/x^2,x)<sep>IsEvenFunction(1/x,x):
IsOddFunction:IsOddFunction(Cos(b*x),x)<sep>IsOddFunction(Sin(b*x),x)<sep>IsOddFunction(1/x,x)<sep>IsOddFunction(1/x^2,x):
IsFunction:IsFunction(x+5)<sep>IsFunction(Sin(x))<sep>IsFunction(x):
IsAtom:IsAtom(x+5)<sep>IsAtom(5):
IsString:IsString("duh")<sep>IsString(duh):
IsNumber:IsNumber(6)<sep>IsNumber(3.25)<sep>IsNumber(I)<sep>IsNumber("duh"):
IsList:IsList({2,3,5})<sep>IsList(2+3+5):
IsBound:[ Local(x); Echo(IsBound(x)); x \:= 5; Echo(IsBound(x)); ]:
IsBoolean:IsBoolean(a)<sep>IsBoolean(True)<sep>IsBoolean(a And b):
IsNotZero:IsNotZero(3.25)<sep>IsNotZero(0):
IsConstant:IsConstant(Cos(x))<sep>IsConstant(Cos(2))<sep>IsConstant(Cos(2+x)):
CanProve:CanProve(a  Or   Not a)<sep>CanProve(True  Or a)<sep>CanProve(False  Or  a)<sep>CanProve(a  And   Not a)<sep>CanProve(a Or b Or (a And b))<sep>CanProve(( (a=>b) And (b=>c) ) => (a=>c)):
Pi:Sin(3*Pi/2)<sep>N(Pi):
Clear:[ a\:=2; Clear(a); a; ]:
Local:[ Local(a); a\:=2; [ Local(a); a\:=1; ]; a; ]:
UniqueConstant:UniqueConstant()<sep>UniqueConstant():
FullForm:FullForm(a+b+c)<sep>FullForm(2*I*b^2):
Echo:Echo(5+3)<sep>Echo({"The square of two is ", 2*2})<sep>Echo("D(x)Sin(x) = ",D(x)Sin(x)):
FromString:FromString("2+5; this is never read") [res \:= Read(); ]<sep>FromString("2+5; this is never read") [res \:= Eval(Read()); ]:
ToString:ToString() Echo("The square of 8 is ",8^2):
Read:FromString("2+5;") Read()<sep>FromString("") Read():
String:String(a):
Atom:Atom("a"):
ConcatStrings:ConcatStrings("a","b","c"):
LocalSymbols:LocalSymbols(a,b)a+b:
Version:Version():
OSVersion:OSVersion():
Apply:Apply("+", {5,9})<sep>Apply(Lambda({x,y}, x-y^2), {Cos(a), Sin(a)})<sep>Lambda({x,y}, x-y^2) @ {Cos(a), Sin(a)}:
