
Chapter()"Propositional logic theorem prover";



AddAnchor("CanProve");
SubSection()"CanProve";
StandardLib();

Topical()"Calling Sequence";
Text()"CanProve(proposition)";

Topical()"Parameters";
Text()"proposition - a logical proposition";

Topical()"Description";
Text()"Yacas has a small built-in propositional logic theorem prover.
It can be invoked with a call to CanProve. <br>

An example of a proposition is 'if a implies b and b implies c then
a implies c'. Yacas supports the following operators <p>

 Not     negation, read as 'not'        <br>
 And     conjunction, read as 'and'     <br> 
 Or     disjunction, read as 'or'      <br> 
=>   implication, read as 'implies' <br> 

So the above mentioned proposition would be represented by

":HtmlCommand(
"( (a=>b) And (b=>c) ) => (a=>c)
"):"
 
Yacas can prove that is correct by applying ":HtmlTerm("CanProve"):"
to it:


":HtmlCommand(
"In> CanProve(( (a=>b) And (b=>c) ) => (a=>c))
Out> True;
"):"

It does this the following way: in order to prove proposition p, it
suffices to prove that  Not p is false. It continues to simplify  Not p
using the rules <p>


":HtmlCommand(
" Not  ( Not x)      --> x        eliminate double negation
x=>y        -->  Not x  Or  y   eliminate implication
 Not (x And y)      -->  Not x  Or   Not y  De Morgan's law
 Not (x  Or  y)    -->  Not x  And   Not y  De Morgan's law
(x  And  y)  Or  z --> (x Or z) And (y Or z)  Distribution
x  Or  (y  And  z) --> (x Or y) And (x Or z)  Distribution
"):"
And the obvious other rules: 'True Or x --> True' etc.
The above rules will translate the proposition into a form

":HtmlCommand(
"(p1  Or  p2  Or  ...)  And  (q1  Or  q2  Or  ...)  And ...
"):"

If any of the clauses is false, the entire expression will be false.
In the next step, clauses are scanned for situations of the form:
":HtmlCommand(
"(p Or Y)  And  ( Not p Or Z) --> (Y Or Z)
"):"

If this combination ":HtmlTerm("(Y Or Z)"):" is empty, it is false, and
thus the entire proposition is false. <p>

As a last step, the algorithm negates the result again. This has the
added advantage of simplifying the expression further. 
    
";

Topical()"Examples";
Text()


HtmlCommand(
"In> CanProve(a  Or   Not a)         
Out> True;
In> CanProve(True  Or  a)       
Out> True;
In> CanProve(False  Or  a)      
Out> a;
In> CanProve(a  And   Not a)         
Out> False;
In> CanProve(a  Or b Or (a And b))     
Out> a Or b;

");

Topical()"See Also"; 
SeeAlso({"True","False","And","Or","Not"});

/*
"";
*/





